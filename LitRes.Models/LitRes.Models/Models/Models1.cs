//-----------------
// WARNING: This code is autogenerated, do not modify it directly.
//-----------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.Serialization;

using Digillect;
using Digillect.Collections;

using System.Xml.Serialization;
using System.Globalization;
using System.Xml;
using System.IO;

namespace LitRes.Models
{
    #region public class CatalitCredentials
    [XmlRoot]
    public partial class CatalitCredentials : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _login;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _password;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _phone;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isRealAccount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _canRebill;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _userId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _creditCardLastNumbers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _purchasedBooksCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _sessionId;
        #endregion

        #region Properties

        public string UserId
        {
            get { return _userId; }
            set
            {
                if (!object.Equals(_userId, value))
                {
                    OnPropertyChangingOld("UserId", _userId, value);
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }

        public string CanRebill
        {
            get { return _canRebill; }
            set
            {
                if (!object.Equals(_canRebill, value))
                {
                    OnPropertyChangingOld("CanRebill", _canRebill, value);
                    _canRebill = value;
                    OnPropertyChanged("CanRebill");
                }
            }
        }

        public string CreditCardLastNumbers
        {
            get { return _creditCardLastNumbers; }
            set
            {
                if (!object.Equals(_creditCardLastNumbers, value))
                {
                    OnPropertyChangingOld("CreditCardLastNumbers", _creditCardLastNumbers, value);
                    _creditCardLastNumbers = value;
                    OnPropertyChanged("CreditCardLastNumbers");
                }
            }
        }

        public int PurchasedBooksCount
        {
            get { return _purchasedBooksCount; }
            set
            {
                if (!object.Equals(_purchasedBooksCount, value))
                {
                    OnPropertyChangingOld("PurchasedBooksCount", _purchasedBooksCount, value);
                    _purchasedBooksCount = value;
                    OnPropertyChanged("PurchasedBooksCount");
                }
            }
        }

        [XmlAttribute]
        public string Login
        {
            get { return _login; }
            set
            {
                if (!object.Equals(_login, value))
                {
                    OnPropertyChangingOld("Login", _login, value);
                    _login = value;
                    OnPropertyChanged("Login");
                }
            }
        }
        [XmlAttribute]
        public string Password
        {
            get { return _password; }
            set
            {
                if (!object.Equals(_password, value))
                {
                    OnPropertyChangingOld("Password", _password, value);
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        [XmlAttribute]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (!object.Equals(_phone, value))
                {
                    OnPropertyChangingOld("Phone", _phone, value);
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        [XmlAttribute]
        public bool IsRealAccount
        {
            get { return _isRealAccount; }
            set
            {
                if (!object.Equals(_isRealAccount, value))
                {
                    OnPropertyChangingOld("IsRealAccount", _isRealAccount, value);
                    _isRealAccount = value;
                    OnPropertyChanged("IsRealAccount");
                }
            }
        }
        public string Sid
        {
            get { return _sessionId; }
            set
            {
                if (!object.Equals(_sessionId, value))
                {
                    OnPropertyChangingOld("Sid", _sessionId, value);
                    _sessionId = value;
                    OnPropertyChanged("Sid");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (CatalitCredentials)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _login = other._login;
            _password = other._password;
            _phone = other._phone;
            _isRealAccount = other._isRealAccount;
            _canRebill = other._canRebill;
            _userId = other._userId;
            _creditCardLastNumbers = other._creditCardLastNumbers;
            _purchasedBooksCount = other._purchasedBooksCount;
            _sessionId = other._sessionId;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(CatalitCredentials source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(CatalitCredentials source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as CatalitCredentials;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_login, other._login))
            {
                return false;
            }

            if (!object.Equals(_password, other._password))
            {
                return false;
            }

            if (!object.Equals(_phone, other._phone))
            {
                return false;
            }

            if (!object.Equals(_isRealAccount, other._isRealAccount))
            {
                return false;
            }

            if (!object.Equals(_canRebill, other._canRebill))
            {
                return false;
            }

            if (!object.Equals(_userId, other._userId))
            {
                return false;
            }

            if (!object.Equals(_creditCardLastNumbers, other._creditCardLastNumbers))
            {
                return false;
            }

            if (!object.Equals(_sessionId, other._sessionId))
            {
                return false;
            }

            if (_purchasedBooksCount != other._purchasedBooksCount)
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_login != null)
            {
                hashCode = hashCode * 37 + _login.GetHashCode();
            }

            if (_password != null)
            {
                hashCode = hashCode * 37 + _password.GetHashCode();
            }

            if (_phone != null)
            {
                hashCode = hashCode * 37 + _phone.GetHashCode();
            }

            if (_canRebill != null)
            {
                hashCode = hashCode * 37 + _canRebill.GetHashCode();
            }

            if (_userId != null)
            {
                hashCode = hashCode * 37 + _userId.GetHashCode();
            }

            if (_creditCardLastNumbers != null)
            {
                hashCode = hashCode * 37 + _creditCardLastNumbers.GetHashCode();
            }

            if (_sessionId != null)
            {
                hashCode = hashCode * 37 + _sessionId.GetHashCode();
            }

            hashCode = hashCode * 37 + _isRealAccount.GetHashCode();
            hashCode = hashCode * 37 + _purchasedBooksCount.GetHashCode();

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class SearchQuery
    [XmlRoot]
    public partial class SearchQuery : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _searchString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _date;
        #endregion

        #region Properties
        [XmlAttribute]
        public string SearchString
        {
            get { return _searchString; }
            set
            {
                if (!object.Equals(_searchString, value))
                {
                    OnPropertyChangingOld("SearchString", _searchString, value);
                    _searchString = value;
                    OnPropertyChanged("SearchString");
                }
            }
        }
        [XmlAttribute]
        public DateTime Date
        {
            get { return _date; }
            set
            {
                if (!object.Equals(_date, value))
                {
                    OnPropertyChangingOld("Date", _date, value);
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (SearchQuery)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _searchString = other._searchString;
            _date = other._date;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(SearchQuery source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(SearchQuery source, bool cloning, bool deepCloning);
        #endregion
        #region CreateKey
        protected override XKey CreateKey()
        {
            XKey key = base.CreateKey();

            key = key.WithKey("SearchString", _searchString);

            return key;
        }
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as SearchQuery;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_searchString, other._searchString))
            {
                return false;
            }

            if (!object.Equals(_date, other._date))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_searchString != null)
            {
                hashCode = hashCode * 37 + _searchString.GetHashCode();
            }

            hashCode = hashCode * 37 + _date.GetHashCode();

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Purchase
    [XmlRoot]
    public partial class Purchase : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _win8Inapp;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _art;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _purchaseId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _productId;
        #endregion

        #region Properties
        [XmlAttribute]
        public string Win8Inapp
        {
            get { return _win8Inapp; }
            set
            {
                if (!object.Equals(_win8Inapp, value))
                {
                    OnPropertyChangingOld("Win8Inapp", _win8Inapp, value);
                    _win8Inapp = value;
                    OnPropertyChanged("Win8Inapp");
                }
            }
        }
        [XmlAttribute]
        public int Art
        {
            get { return _art; }
            set
            {
                if (!object.Equals(_art, value))
                {
                    OnPropertyChangingOld("Art", _art, value);
                    _art = value;
                    OnPropertyChanged("Art");
                }
            }
        }
        [XmlAttribute]
        public string PurchaseId
        {
            get { return _purchaseId; }
            set
            {
                if (!object.Equals(_purchaseId, value))
                {
                    OnPropertyChangingOld("PurchaseId", _purchaseId, value);
                    _purchaseId = value;
                    OnPropertyChanged("PurchaseId");
                }
            }
        }
        [XmlAttribute]
        public string ProductId
        {
            get { return _productId; }
            set
            {
                if (!object.Equals(_productId, value))
                {
                    OnPropertyChangingOld("ProductId", _productId, value);
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Purchase)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _win8Inapp = other._win8Inapp;
            _art = other._art;
            _purchaseId = other._purchaseId;
            _productId = other._productId;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Purchase source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Purchase source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Purchase;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_win8Inapp, other._win8Inapp))
            {
                return false;
            }

            if (!object.Equals(_art, other._art))
            {
                return false;
            }

            if (!object.Equals(_purchaseId, other._purchaseId))
            {
                return false;
            }

            if (!object.Equals(_productId, other._productId))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_win8Inapp != null)
            {
                hashCode = hashCode * 37 + _win8Inapp.GetHashCode();
            }

            hashCode = hashCode * 37 + _art.GetHashCode();

            if (_purchaseId != null)
            {
                hashCode = hashCode * 37 + _purchaseId.GetHashCode();
            }

            if (_productId != null)
            {
                hashCode = hashCode * 37 + _productId.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class BannersResponse
    [XmlRoot("catalit-banners")]
    public partial class BannersResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Banner> _banners;
        #endregion

        #region Properties

        [XmlElement("banner")]
        public XCollection<Banner> Banners
        {
            get { return _banners; }
            set
            {
                if (!object.Equals(_banners, value))
                {
                    OnPropertyChangingOld("Banners", _banners, value);
                    _banners = value;
                    OnPropertyChanged("Banners");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (BannersResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            if (cloning)
            {
                _banners = other._banners == null ? null : (XCollection<Banner>)other._banners.Clone(deepCloning);
            }
            else
            {
                if (_banners != null)
                {
                    if (other._banners != null)
                    {
                        _banners.Update(other._banners);
                    }
                    else
                    {
                        _banners = null;
                    }
                }
                else
                {
                    if (other._banners != null)
                    {
                        _banners = (XCollection<Banner>)other._banners.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(BannersResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(BannersResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as BannersResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_banners, other._banners))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_banners != null)
            {
                hashCode = hashCode * 37 + _banners.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Banner
    [XmlRoot("banner")]
    public partial class Banner : XObject, IXIdentified<int>
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _type;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _contentId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _image;
        #endregion

        #region Properties
        [XmlAttribute("id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        [XmlAttribute("type")]
        public string Type
        {
            get { return _type; }
            set
            {
                if (!object.Equals(_type, value))
                {
                    OnPropertyChangingOld("Type", _type, value);
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        [XmlAttribute("content-id")]
        public string ContentId
        {
            get { return _contentId; }
            set
            {
                if (!object.Equals(_contentId, value))
                {
                    OnPropertyChangingOld("ContentId", _contentId, value);
                    _contentId = value;
                    OnPropertyChanged("ContentId");
                }
            }
        }
        [XmlAttribute("image")]
        public string Image
        {
            get { return _image; }
            set
            {
                if (!object.Equals(_image, value))
                {
                    OnPropertyChangingOld("Image", _image, value);
                    _image = value;
                    OnPropertyChanged("Image");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Banner)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _id = other._id;
            _type = other._type;
            _contentId = other._contentId;
            _image = other._image;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Banner source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Banner source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as Banner;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            if (!object.Equals(_type, other._type))
            {
                return false;
            }

            if (!object.Equals(_contentId, other._contentId))
            {
                return false;
            }

            if (!object.Equals(_image, other._image))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_id != null)
            {
                hashCode = hashCode * 37 + _id.GetHashCode();
            }

            if (_type != null)
            {
                hashCode = hashCode * 37 + _type.GetHashCode();
            }

            if (_contentId != null)
            {
                hashCode = hashCode * 37 + _contentId.GetHashCode();
            }

            if (_image != null)
            {
                hashCode = hashCode * 37 + _image.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class RawFile
    [XmlRoot]
    public partial class RawFile : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private byte[] _raw;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _zipped;
        #endregion

        #region Properties
        [XmlAttribute]
        public byte[] Raw
        {
            get { return _raw; }
            set
            {
                if (!object.Equals(_raw, value))
                {
                    OnPropertyChangingOld("Raw", _raw, value);
                    _raw = value;
                    OnPropertyChanged("Raw");
                }
            }
        }
        [XmlAttribute]
        public bool Zipped
        {
            get { return _zipped; }
            set
            {
                if (!object.Equals(_zipped, value))
                {
                    OnPropertyChangingOld("Zipped", _zipped, value);
                    _zipped = value;
                    OnPropertyChanged("Zipped");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (RawFile)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _raw = other._raw;
            _zipped = other._zipped;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(RawFile source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(RawFile source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as RawFile;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_raw, other._raw))
            {
                return false;
            }

            if (!object.Equals(_zipped, other._zipped))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_raw != null)
            {
                hashCode = hashCode * 37 + _raw.GetHashCode();
            }

            hashCode = hashCode * 37 + _zipped.GetHashCode();

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class BookForLayout
    [XmlRoot]
    public partial class BookForLayout : XObject<int>
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _image;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _author;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _rating;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _price;
        #endregion

        #region Properties
        [XmlAttribute]
        public string Image
        {
            get { return _image; }
            set
            {
                if (!object.Equals(_image, value))
                {
                    OnPropertyChangingOld("Image", _image, value);
                    _image = value;
                    OnPropertyChanged("Image");
                }
            }
        }
        [XmlAttribute]
        public string Author
        {
            get { return _author; }
            set
            {
                if (!object.Equals(_author, value))
                {
                    OnPropertyChangingOld("Author", _author, value);
                    _author = value;
                    OnPropertyChanged("Author");
                }
            }
        }
        [XmlAttribute]
        public string Name
        {
            get { return _name; }
            set
            {
                if (!object.Equals(_name, value))
                {
                    OnPropertyChangingOld("Name", _name, value);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        [XmlAttribute]
        public double Rating
        {
            get { return _rating; }
            set
            {
                if (!object.Equals(_rating, value))
                {
                    OnPropertyChangingOld("Rating", _rating, value);
                    _rating = value;
                    OnPropertyChanged("Rating");
                }
            }
        }
        [XmlAttribute]
        public double Price
        {
            get { return _price; }
            set
            {
                if (!object.Equals(_price, value))
                {
                    OnPropertyChangingOld("Price", _price, value);
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (BookForLayout)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _image = other._image;
            _author = other._author;
            _name = other._name;
            _rating = other._rating;
            _price = other._price;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(BookForLayout source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(BookForLayout source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as BookForLayout;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_image, other._image))
            {
                return false;
            }

            if (!object.Equals(_author, other._author))
            {
                return false;
            }

            if (!object.Equals(_name, other._name))
            {
                return false;
            }

            if (!object.Equals(_rating, other._rating))
            {
                return false;
            }

            if (!object.Equals(_price, other._price))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_image != null)
            {
                hashCode = hashCode * 37 + _image.GetHashCode();
            }

            if (_author != null)
            {
                hashCode = hashCode * 37 + _author.GetHashCode();
            }

            if (_name != null)
            {
                hashCode = hashCode * 37 + _name.GetHashCode();
            }

            hashCode = hashCode * 37 + _rating.GetHashCode();

            hashCode = hashCode * 37 + _price.GetHashCode();

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class BookIndex
    [XmlRoot]
    public partial class BookIndex : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _bookId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _blockIndex;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _saveDateTime;
        #endregion

        #region Properties
        [XmlAttribute]
        public int BookId
        {
            get { return _bookId; }
            set
            {
                if (!object.Equals(_bookId, value))
                {
                    OnPropertyChangingOld("BookId", _bookId, value);
                    _bookId = value;
                    OnPropertyChanged("BookId");
                }
            }
        }
        [XmlAttribute]
        public string BlockIndex
        {
            get { return _blockIndex; }
            set
            {
                if (!object.Equals(_blockIndex, value))
                {
                    OnPropertyChangingOld("BlockIndex", _blockIndex, value);
                    _blockIndex = value;
                    OnPropertyChanged("BlockIndex");
                }
            }
        }
        [XmlAttribute]
        public DateTime SaveDateTime
        {
            get { return _saveDateTime; }
            set
            {
                if (!object.Equals(_saveDateTime, value))
                {
                    OnPropertyChangingOld("SaveDateTime", _saveDateTime, value);
                    _saveDateTime = value;
                    OnPropertyChanged("SaveDateTime");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (BookIndex)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _bookId = other._bookId;
            _blockIndex = other._blockIndex;
            _saveDateTime = other._saveDateTime;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(BookIndex source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(BookIndex source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as BookIndex;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_bookId, other._bookId))
            {
                return false;
            }

            if (!object.Equals(_blockIndex, other._blockIndex))
            {
                return false;
            }

            if (!object.Equals(_saveDateTime, other._saveDateTime))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            hashCode = hashCode * 37 + _bookId.GetHashCode();

            if (_blockIndex != null)
            {
                hashCode = hashCode * 37 + _blockIndex.GetHashCode();
            }

            hashCode = hashCode * 37 + _saveDateTime.GetHashCode();

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class ReaderSettings
    [XmlRoot]
    public partial class ReaderSettings : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DateTime _lastUpdate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _systemTiles;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _autorotate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _fitWidth;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _theme;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _font;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _fontSize;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _margin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _characterSpacing;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private float _brightness;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _hyphenate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _animationMoveToPage;
        #endregion

        #region Properties
        [XmlAttribute]
        public DateTime LastUpdate
        {
            get { return _lastUpdate; }
            set
            {
                if (!object.Equals(_lastUpdate, value))
                {
                    OnPropertyChangingOld("LastUpdate", _lastUpdate, value);
                    _lastUpdate = value;
                    OnPropertyChanged("LastUpdate");
                }
            }
        }
        [XmlAttribute]
        public bool SystemTiles
        {
            get { return _systemTiles; }
            set
            {
                if (!object.Equals(_systemTiles, value))
                {
                    OnPropertyChangingOld("SystemTiles", _systemTiles, value);
                    _systemTiles = value;
                    OnPropertyChanged("SystemTiles");
                }
            }
        }
        [XmlAttribute]
        public bool Autorotate
        {
            get { return _autorotate; }
            set
            {
                if (!object.Equals(_autorotate, value))
                {
                    OnPropertyChangingOld("Autorotate", _autorotate, value);
                    _autorotate = value;
                    OnPropertyChanged("Autorotate");
                }
            }
        }
        [XmlAttribute]
        public bool FitWidth
        {
            get { return _fitWidth; }
            set
            {
                if (!object.Equals(_fitWidth, value))
                {
                    OnPropertyChangingOld("FitWidth", _fitWidth, value);
                    _fitWidth = value;
                    OnPropertyChanged("FitWidth");
                }
            }
        }
        [XmlAttribute]
        public int Theme
        {
            get { return _theme; }
            set
            {
                if (!object.Equals(_theme, value))
                {
                    OnPropertyChangingOld("Theme", _theme, value);
                    _theme = value;
                    OnPropertyChanged("Theme");
                }
            }
        }
        [XmlAttribute]
        public int Font
        {
            get { return _font; }
            set
            {
                if (!object.Equals(_font, value))
                {
                    OnPropertyChangingOld("Font", _font, value);
                    _font = value;
                    OnPropertyChanged("Font");
                }
            }
        }
        [XmlAttribute]
        public int FontSize
        {
            get { return _fontSize; }
            set
            {
                if (!object.Equals(_fontSize, value))
                {
                    OnPropertyChangingOld("FontSize", _fontSize, value);
                    _fontSize = value;
                    OnPropertyChanged("FontSize");
                }
            }
        }
        [XmlAttribute]
        public int Margin
        {
            get { return _margin; }
            set
            {
                if (!object.Equals(_margin, value))
                {
                    OnPropertyChangingOld("Margin", _margin, value);
                    _margin = value;
                    OnPropertyChanged("Margin");
                }
            }
        }
        [XmlAttribute]
        public int CharacterSpacing
        {
            get { return _characterSpacing; }
            set
            {
                if (!object.Equals(_characterSpacing, value))
                {
                    OnPropertyChangingOld("CharacterSpacing", _characterSpacing, value);
                    _characterSpacing = value;
                    OnPropertyChanged("CharacterSpacing");
                }
            }
        }
        [XmlAttribute]
        public float Brightness
        {
            get { return _brightness; }
            set
            {
                if (!object.Equals(_brightness, value))
                {
                    OnPropertyChangingOld("Brightness", _brightness, value);
                    _brightness = value;
                    OnPropertyChanged("Brightness");
                }
            }
        }
        [XmlAttribute]
        public bool Hyphenate
        {
            get { return _hyphenate; }
            set
            {
                if (!object.Equals(_hyphenate, value))
                {
                    OnPropertyChangingOld("Hyphenate", _hyphenate, value);
                    _hyphenate = value;
                    OnPropertyChanged("Hyphenate");
                }
            }
        }
        [XmlAttribute]
        public bool AnimationMoveToPage
        {
            get { return _animationMoveToPage; }
            set
            {
                if (!object.Equals(_animationMoveToPage, value))
                {
                    OnPropertyChangingOld("AnimationMoveToPage", _animationMoveToPage, value);
                    _animationMoveToPage = value;
                    OnPropertyChanged("AnimationMoveToPage");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (ReaderSettings)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _lastUpdate = other._lastUpdate;
            _autorotate = other._autorotate;
            _fitWidth = other._fitWidth;
            _theme = other._theme;
            _font = other._font;
            _fontSize = other._fontSize;
            _margin = other._margin;
            _characterSpacing = other._characterSpacing;
            _brightness = other._brightness;
            _hyphenate = other._hyphenate;
            _animationMoveToPage = other._animationMoveToPage;
            _systemTiles = other._systemTiles;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(ReaderSettings source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(ReaderSettings source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as ReaderSettings;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_lastUpdate, other._lastUpdate))
            {
                return false;
            }

            if (!object.Equals(_autorotate, other._autorotate))
            {
                return false;
            }

            if (!object.Equals(_systemTiles, other._systemTiles))
            {
                return false;
            }

            if (!object.Equals(_fitWidth, other._fitWidth))
            {
                return false;
            }

            if (!object.Equals(_theme, other._theme))
            {
                return false;
            }

            if (!object.Equals(_font, other._font))
            {
                return false;
            }

            if (!object.Equals(_fontSize, other._fontSize))
            {
                return false;
            }

            if (!object.Equals(_margin, other._margin))
            {
                return false;
            }

            if (!object.Equals(_characterSpacing, other._characterSpacing))
            {
                return false;
            }

            if (!object.Equals(_brightness, other._brightness))
            {
                return false;
            }

            if (!object.Equals(_hyphenate, other._hyphenate))
            {
                return false;
            }

            if (!object.Equals(_animationMoveToPage, other._animationMoveToPage))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            hashCode = hashCode * 37 + _lastUpdate.GetHashCode();

            hashCode = hashCode * 37 + _autorotate.GetHashCode();

            hashCode = hashCode * 37 + _systemTiles.GetHashCode();

            hashCode = hashCode * 37 + _fitWidth.GetHashCode();

            hashCode = hashCode * 37 + _theme.GetHashCode();

            hashCode = hashCode * 37 + _font.GetHashCode();

            hashCode = hashCode * 37 + _fontSize.GetHashCode();

            hashCode = hashCode * 37 + _margin.GetHashCode();

            hashCode = hashCode * 37 + _characterSpacing.GetHashCode();

            hashCode = hashCode * 37 + _brightness.GetHashCode();

            hashCode = hashCode * 37 + _hyphenate.GetHashCode();

            hashCode = hashCode * 37 + _animationMoveToPage.GetHashCode();

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class UpdateUserResponse
    [XmlRoot("catalit-updateuser-ok")]
    public partial class UpdateUserResponse : XObject
    {
        #region Fields
        #endregion

        #region Properties
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (UpdateUserResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(UpdateUserResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(UpdateUserResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as UpdateUserResponse;

            if (other == null)
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class CollectionsResponse
    [XmlRoot("catalit-collections")]
    public partial class CollectionsResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Collection> _collections;
        #endregion

        #region Properties
        [XmlElement("collection")]
        public XCollection<Collection> Collections
        {
            get { return _collections; }
            set
            {
                if (!object.Equals(_collections, value))
                {
                    OnPropertyChangingOld("Collections", _collections, value);
                    _collections = value;
                    OnPropertyChanged("Collections");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (CollectionsResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            if (cloning)
            {
                _collections = other._collections == null ? null : (XCollection<Collection>)other._collections.Clone(deepCloning);
            }
            else
            {
                if (_collections != null)
                {
                    if (other._collections != null)
                    {
                        _collections.Update(other._collections);
                    }
                    else
                    {
                        _collections = null;
                    }
                }
                else
                {
                    if (other._collections != null)
                    {
                        _collections = (XCollection<Collection>)other._collections.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(CollectionsResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(CollectionsResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as CollectionsResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_collections, other._collections))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_collections != null)
            {
                hashCode = hashCode * 37 + _collections.GetHashCode();
            }

            return hashCode;
        }
        #endregion

        #region public class Collection
        [XmlRoot]
        public partial class Collection : XObject, IXIdentified<int>
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _id;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _name;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _itemsLeft;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private Hidden _text;
            #endregion

            #region Properties
            [XmlAttribute("id")]
            public int Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            [XmlAttribute("name")]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (!object.Equals(_name, value))
                    {
                        OnPropertyChangingOld("Name", _name, value);
                        _name = value;
                        OnPropertyChanged("Name");
                    }
                }
            }
            [XmlAttribute("items_left")]
            public int ItemsLeft
            {
                get { return _itemsLeft; }
                set
                {
                    if (!object.Equals(_itemsLeft, value))
                    {
                        OnPropertyChangingOld("ItemsLeft", _itemsLeft, value);
                        _itemsLeft = value;
                        OnPropertyChanged("ItemsLeft");
                    }
                }
            }
            [XmlElement("text_html")]
            public Hidden Text
            {
                get { return _text; }
                set
                {
                    if (!object.Equals(_text, value))
                    {
                        OnPropertyChangingOld("Text", _text, value);
                        _text = value;
                        OnPropertyChanged("Text");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Collection)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _id = other._id;
                _name = other._name;
                _itemsLeft = other._itemsLeft;

                if (cloning)
                {
                    _text = other._text == null ? null : (Hidden)other._text.Clone(deepCloning);
                }
                else
                {
                    if (_text != null)
                    {
                        if (other._text != null)
                        {
                            _text.Update(other._text);
                        }
                        else
                        {
                            _text = null;
                        }
                    }
                    else
                    {
                        if (other._text != null)
                        {
                            _text = (Hidden)other._text.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Collection source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Collection source, bool cloning, bool deepCloning);
            #endregion
            #region CreateKey
            protected override XKey CreateKey()
            {
                XKey key = base.CreateKey();

                key = key.WithKey("Id", _id);

                return key;
            }
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Collection;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                if (!object.Equals(_name, other._name))
                {
                    return false;
                }

                if (!object.Equals(_itemsLeft, other._itemsLeft))
                {
                    return false;
                }

                if (!object.Equals(_text, other._text))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                hashCode = hashCode * 37 + _id.GetHashCode();

                if (_name != null)
                {
                    hashCode = hashCode * 37 + _name.GetHashCode();
                }

                hashCode = hashCode * 37 + _itemsLeft.GetHashCode();

                if (_text != null)
                {
                    hashCode = hashCode * 37 + _text.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
    }
    #endregion
    #region public class TakeCollectionBookResponse
    [XmlRoot("catalit-get-collection-book-ok")]
    public partial class TakeCollectionBookResponse : XObject
    {
        #region Fields
        #endregion

        #region Properties
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (TakeCollectionBookResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(TakeCollectionBookResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(TakeCollectionBookResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as TakeCollectionBookResponse;

            if (other == null)
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class ActivateCouponeResponse
    [XmlRoot("catalit-activate-coupone-ok")]
    public partial class ActivateCouponeResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _account;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _couponeClass;
        #endregion

        #region Properties
        [XmlAttribute("account")]
        public string Account
        {
            get { return _account; }
            set
            {
                if (!object.Equals(_account, value))
                {
                    OnPropertyChangingOld("Account", _account, value);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        [XmlAttribute("coupone_class")]
        public string CouponeClass
        {
            get { return _couponeClass; }
            set
            {
                if (!object.Equals(_couponeClass, value))
                {
                    OnPropertyChangingOld("CouponeClass", _couponeClass, value);
                    _couponeClass = value;
                    OnPropertyChanged("CouponeClass");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (ActivateCouponeResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _account = other._account;
            _couponeClass = other._couponeClass;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(ActivateCouponeResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(ActivateCouponeResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as ActivateCouponeResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_account, other._account))
            {
                return false;
            }

            if (!object.Equals(_couponeClass, other._couponeClass))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_account != null)
            {
                hashCode = hashCode * 37 + _account.GetHashCode();
            }

            if (_couponeClass != null)
            {
                hashCode = hashCode * 37 + _couponeClass.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class PurchaseResponse
    [XmlRoot("catalit-inapp-processing")]
    public partial class PurchaseResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _account;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _state;
        #endregion

        #region Properties
        [XmlAttribute("account")]
        public string Account
        {
            get { return _account; }
            set
            {
                if (!object.Equals(_account, value))
                {
                    OnPropertyChangingOld("Account", _account, value);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        [XmlAttribute("state")]
        public string State
        {
            get { return _state; }
            set
            {
                if (!object.Equals(_state, value))
                {
                    OnPropertyChangingOld("State", _state, value);
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (PurchaseResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _account = other._account;
            _state = other._state;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(PurchaseResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(PurchaseResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as PurchaseResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_account, other._account))
            {
                return false;
            }

            if (!object.Equals(_state, other._state))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_account != null)
            {
                hashCode = hashCode * 37 + _account.GetHashCode();
            }

            if (_state != null)
            {
                hashCode = hashCode * 37 + _state.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class LitresPurchaseResponse
    [XmlRoot("catalit-purchase-ok")]
    public partial class LitresPurchaseResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _account;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _art;
        #endregion

        #region Properties
        [XmlAttribute("account")]
        public string Account
        {
            get { return _account; }
            set
            {
                if (!object.Equals(_account, value))
                {
                    OnPropertyChangingOld("Account", _account, value);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        [XmlAttribute("art")]
        public string Art
        {
            get { return _art; }
            set
            {
                if (!object.Equals(_art, value))
                {
                    OnPropertyChangingOld("Art", _art, value);
                    _art = value;
                    OnPropertyChanged("Art");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (LitresPurchaseResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _account = other._account;
            _art = other._art;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(LitresPurchaseResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(LitresPurchaseResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as LitresPurchaseResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_account, other._account))
            {
                return false;
            }

            if (!object.Equals(_art, other._art))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_account != null)
            {
                hashCode = hashCode * 37 + _account.GetHashCode();
            }

            if (_art != null)
            {
                hashCode = hashCode * 37 + _art.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion

    #region public class MobileCommerceResponse
    [XmlRoot("catalit-mcommerce-init")]
    public partial class MobileCommerceResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _orderId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _state;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _price;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _error;
        #endregion

        #region Properties
        [XmlAttribute("order_id")]
        public string OrderId
        {
            get { return _orderId; }
            set
            {
                if (!object.Equals(_orderId, value))
                {
                    OnPropertyChangingOld("OrderId", _orderId, value);
                    _orderId = value;
                    OnPropertyChanged("OrderId");
                }
            }
        }
        [XmlAttribute("state")]
        public string State
        {
            get { return _state; }
            set
            {
                if (!object.Equals(_state, value))
                {
                    OnPropertyChangingOld("State", _state, value);
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        [XmlAttribute("price")]
        public double Price
        {
            get { return _price; }
            set
            {
                if (!object.Equals(_price, value))
                {
                    OnPropertyChangingOld("Price", _price, value);
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        [XmlAttribute("error")]
        public int Error
        {
            get { return _error; }
            set
            {
                if (!object.Equals(_error, value))
                {
                    OnPropertyChangingOld("Error", _error, value);
                    _error = value;
                    OnPropertyChanged("Error");
                }
            }
        }

        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (MobileCommerceResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _orderId = other._orderId;
            _state = other._state;
            _price = other._price;
            _error = other._error;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(MobileCommerceResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(MobileCommerceResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as MobileCommerceResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_orderId, other._orderId))
            {
                return false;
            }

            if (!object.Equals(_state, other._state))
            {
                return false;
            }

            if (!object.Equals(_price, other._price))
            {
                return false;
            }

            if (!object.Equals(_error, other._error))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_orderId != null)
            {
                hashCode = hashCode * 37 + _orderId.GetHashCode();
            }

            if (_state != null)
            {
                hashCode = hashCode * 37 + _state.GetHashCode();
            }

            if (_price != null)
            {
                hashCode = hashCode * 37 + _price.GetHashCode();
            }

            if (_error != null)
            {
                hashCode = hashCode * 37 + _error.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion

    #region public class NotificationsResponce
    [XmlRoot("catalit_author_subscr")]
    public partial class NotificationsResponce : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Notification> _notifications;
        #endregion

        #region Properties
        [XmlElement("author")]
        public XCollection<Notification> Notifications
        {
            get { return _notifications; }
            set
            {
                if (!object.Equals(_notifications, value))
                {
                    OnPropertyChangingOld("Notifications", _notifications, value);
                    _notifications = value;
                    OnPropertyChanged("Notifications");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (NotificationsResponce)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            if (cloning)
            {
                _notifications = other._notifications == null ? null : (XCollection<Notification>)other._notifications.Clone(deepCloning);
            }
            else
            {
                if (_notifications != null)
                {
                    if (other._notifications != null)
                    {
                        _notifications.Update(other._notifications);
                    }
                    else
                    {
                        _notifications = null;
                    }
                }
                else
                {
                    if (other._notifications != null)
                    {
                        _notifications = (XCollection<Notification>)other._notifications.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(NotificationsResponce source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(NotificationsResponce source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as NotificationsResponce;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_notifications, other._notifications))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_notifications != null)
            {
                hashCode = hashCode * 37 + _notifications.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Notification
    [XmlRoot]
    public partial class Notification : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _notifiedPerson;
        #endregion

        #region Properties
        [XmlAttribute("name")]
        public string NotifiedPerson
        {
            get { return _notifiedPerson; }
            set
            {
                if (!object.Equals(_notifiedPerson, value))
                {
                    OnPropertyChangingOld("NotifiedPerson", _notifiedPerson, value);
                    _notifiedPerson = value;
                    OnPropertyChanged("NotifiedPerson");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Notification)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _notifiedPerson = other._notifiedPerson;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Notification source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Notification source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Notification;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_notifiedPerson, other._notifiedPerson))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_notifiedPerson != null)
            {
                hashCode = hashCode * 37 + _notifiedPerson.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class PurchaseStateResponse
    [XmlRoot("catalit-payorder-processing-check")]
    public partial class PurchaseStateResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _order;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _state;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _account;
        #endregion

        #region Properties
        [XmlAttribute("order")]
        public string Order
        {
            get { return _order; }
            set
            {
                if (!object.Equals(_order, value))
                {
                    OnPropertyChangingOld("Order", _order, value);
                    _order = value;
                    OnPropertyChanged("Order");
                }
            }
        }
        [XmlAttribute("state")]
        public string State
        {
            get { return _state; }
            set
            {
                if (!object.Equals(_state, value))
                {
                    OnPropertyChangingOld("State", _state, value);
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        [XmlAttribute("account")]
        public string Account
        {
            get { return _account; }
            set
            {
                if (!object.Equals(_account, value))
                {
                    OnPropertyChangingOld("Account", _account, value);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (PurchaseStateResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _order = other._order;
            _state = other._state;
            _account = other._account;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(PurchaseStateResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(PurchaseStateResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as PurchaseStateResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_order, other._order))
            {
                return false;
            }

            if (!object.Equals(_state, other._state))
            {
                return false;
            }

            if (!object.Equals(_account, other._account))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_order != null)
            {
                hashCode = hashCode * 37 + _order.GetHashCode();
            }

            if (_state != null)
            {
                hashCode = hashCode * 37 + _state.GetHashCode();
            }

            if (_account != null)
            {
                hashCode = hashCode * 37 + _account.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class BookmarksResponse
    [XmlRoot("FictionBookMarkup", Namespace = "http://www.gribuser.ru/xml/fictionbook/2.0/markup")]
    public partial class BookmarksResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _lockId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Bookmark> _bookmarks;
        #endregion

        #region Properties
        [XmlAttribute("lock-id")]
        public string LockId
        {
            get { return _lockId; }
            set
            {
                if (!object.Equals(_lockId, value))
                {
                    OnPropertyChangingOld("LockId", _lockId, value);
                    _lockId = value;
                    OnPropertyChanged("LockId");
                }
            }
        }
        [XmlElement("Selection")]
        public XCollection<Bookmark> Bookmarks
        {
            get { return _bookmarks; }
            set
            {
                if (!object.Equals(_bookmarks, value))
                {
                    OnPropertyChangingOld("Bookmarks", _bookmarks, value);
                    _bookmarks = value;
                    OnPropertyChanged("Bookmarks");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (BookmarksResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _lockId = other._lockId;

            if (cloning)
            {
                _bookmarks = other._bookmarks == null ? null : (XCollection<Bookmark>)other._bookmarks.Clone(deepCloning);
            }
            else
            {
                if (_bookmarks != null)
                {
                    if (other._bookmarks != null)
                    {
                        _bookmarks.Update(other._bookmarks);
                    }
                    else
                    {
                        _bookmarks = null;
                    }
                }
                else
                {
                    if (other._bookmarks != null)
                    {
                        _bookmarks = (XCollection<Bookmark>)other._bookmarks.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(BookmarksResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(BookmarksResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as BookmarksResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_lockId, other._lockId))
            {
                return false;
            }

            if (!object.Equals(_bookmarks, other._bookmarks))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_lockId != null)
            {
                hashCode = hashCode * 37 + _lockId.GetHashCode();
            }

            if (_bookmarks != null)
            {
                hashCode = hashCode * 37 + _bookmarks.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class AddBookmarkResponse
    [XmlRoot("catalit-store-bookmarks-ok")]
    public partial class AddBookmarkResponse : XObject
    {
        #region Fields
        #endregion

        #region Properties
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (AddBookmarkResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(AddBookmarkResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(AddBookmarkResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as AddBookmarkResponse;

            if (other == null)
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Bookmark
    [XmlRoot]
    public partial class Bookmark : XObject, IXIdentified<string>
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _class;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _title;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _group;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _selection;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _artId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _lastUpdate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _percent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Note _note;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Extract _extractInfo;
        #endregion

        #region Properties
        [XmlAttribute("id")]
        public string Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        [XmlAttribute("class")]
        public string Class
        {
            get { return _class; }
            set
            {
                if (!object.Equals(_class, value))
                {
                    OnPropertyChangingOld("Class", _class, value);
                    _class = value;
                    OnPropertyChanged("Class");
                }
            }
        }
        [XmlAttribute("title")]
        public string Title
        {
            get { return _title; }
            set
            {
                if (!object.Equals(_title, value))
                {
                    OnPropertyChangingOld("Title", _title, value);
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        [XmlAttribute("group")]
        public string Group
        {
            get { return _group; }
            set
            {
                if (!object.Equals(_group, value))
                {
                    OnPropertyChangingOld("Group", _group, value);
                    _group = value;
                    OnPropertyChanged("Group");
                }
            }
        }
        [XmlAttribute("selection")]
        public string Selection
        {
            get { return _selection; }
            set
            {
                if (!object.Equals(_selection, value))
                {
                    OnPropertyChangingOld("Selection", _selection, value);
                    _selection = value;
                    OnPropertyChanged("Selection");
                }
            }
        }
        [XmlAttribute("art-id")]
        public string ArtId
        {
            get { return _artId; }
            set
            {
                if (!object.Equals(_artId, value))
                {
                    OnPropertyChangingOld("ArtId", _artId, value);
                    _artId = value;
                    OnPropertyChanged("ArtId");
                }
            }
        }
        [XmlAttribute("last-update")]
        public string LastUpdate
        {
            get { return _lastUpdate; }
            set
            {
                if (!object.Equals(_lastUpdate, value))
                {
                    OnPropertyChangingOld("LastUpdate", _lastUpdate, value);
                    _lastUpdate = value;
                    OnPropertyChanged("LastUpdate");
                }
            }
        }
        [XmlAttribute("percent")]
        public string Percent
        {
            get { return _percent; }
            set
            {
                if (!object.Equals(_percent, value))
                {
                    OnPropertyChangingOld("Percent", _percent, value);
                    _percent = value;
                    OnPropertyChanged("Percent");
                }
            }
        }
        [XmlElement("Note")]
        public Note NoteText
        {
            get { return _note; }
            set
            {
                if (!object.Equals(_note, value))
                {
                    OnPropertyChangingOld("Note", _note, value);
                    _note = value;
                    OnPropertyChanged("Note");
                }
            }
        }
        [XmlElement("Extract")]
        public Extract ExtractInfo
        {
            get { return _extractInfo; }
            set
            {
                if (!object.Equals(_extractInfo, value))
                {
                    OnPropertyChangingOld("ExtractInfo", _extractInfo, value);
                    _extractInfo = value;
                    OnPropertyChanged("ExtractInfo");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Bookmark)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _id = other._id;
            _class = other._class;
            _title = other._title;
            _group = other._group;
            _selection = other._selection;
            _artId = other._artId;
            _lastUpdate = other._lastUpdate;

            if (cloning)
            {
                _note = other._note == null ? null : (Note)other._note.Clone(deepCloning);
                _extractInfo = other._extractInfo == null ? null : (Extract)other._extractInfo.Clone(deepCloning);
            }
            else
            {
                if (_note != null)
                {
                    if (other._note != null)
                    {
                        _note.Update(other._note);
                    }
                    else
                    {
                        _note = null;
                    }
                }
                else
                {
                    if (other._note != null)
                    {
                        _note = (Note)other._note.Clone(false);
                    }
                }
                if (_extractInfo != null)
                {
                    if (other._extractInfo != null)
                    {
                        _extractInfo.Update(other._extractInfo);
                    }
                    else
                    {
                        _extractInfo = null;
                    }
                }
                else
                {
                    if (other._extractInfo != null)
                    {
                        _extractInfo = (Extract)other._extractInfo.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Bookmark source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Bookmark source, bool cloning, bool deepCloning);
        #endregion
        #region CreateKey
        protected override XKey CreateKey()
        {
            XKey key = base.CreateKey();

            key = key.WithKey("Id", _id);

            return key;
        }
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Bookmark;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            if (!object.Equals(_class, other._class))
            {
                return false;
            }

            if (!object.Equals(_title, other._title))
            {
                return false;
            }

            if (!object.Equals(_group, other._group))
            {
                return false;
            }

            if (!object.Equals(_selection, other._selection))
            {
                return false;
            }

            if (!object.Equals(_artId, other._artId))
            {
                return false;
            }

            if (!object.Equals(_lastUpdate, other._lastUpdate))
            {
                return false;
            }

            if (!object.Equals(_note, other._note))
            {
                return false;
            }

            if (!object.Equals(_extractInfo, other._extractInfo))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_id != null)
            {
                hashCode = hashCode * 37 + _id.GetHashCode();
            }

            if (_class != null)
            {
                hashCode = hashCode * 37 + _class.GetHashCode();
            }

            if (_title != null)
            {
                hashCode = hashCode * 37 + _title.GetHashCode();
            }

            if (_group != null)
            {
                hashCode = hashCode * 37 + _group.GetHashCode();
            }

            if (_selection != null)
            {
                hashCode = hashCode * 37 + _selection.GetHashCode();
            }

            if (_artId != null)
            {
                hashCode = hashCode * 37 + _artId.GetHashCode();
            }

            if (_lastUpdate != null)
            {
                hashCode = hashCode * 37 + _lastUpdate.GetHashCode();
            }

            if (_note != null)
            {
                hashCode = hashCode * 37 + _note.GetHashCode();
            }

            if (_extractInfo != null)
            {
                hashCode = hashCode * 37 + _extractInfo.GetHashCode();
            }

            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Selection:", Selection);
        }

        #region public class Extract
        [XmlRoot]
        public partial class Extract : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _originalLocation;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _selection;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _selectionText;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<ExtractTextElement> _extractText;
            #endregion

            #region Properties
            [XmlAttribute("original-location")]
            public string OriginalLocation
            {
                get { return _originalLocation; }
                set
                {
                    if (!object.Equals(_originalLocation, value))
                    {
                        OnPropertyChangingOld("OriginalLocation", _originalLocation, value);
                        _originalLocation = value;
                        OnPropertyChanged("OriginalLocation");
                    }
                }
            }
            [XmlAttribute("selection")]
            public string Selection
            {
                get { return _selection; }
                set
                {
                    if (!object.Equals(_selection, value))
                    {
                        OnPropertyChangingOld("Selection", _selection, value);
                        _selection = value;
                        OnPropertyChanged("Selection");
                    }
                }
            }
            [XmlAttribute("selection-text")]
            public string SelectionText
            {
                get { return _selectionText; }
                set
                {
                    if (!object.Equals(_selectionText, value))
                    {
                        OnPropertyChangingOld("SelectionText", _selectionText, value);
                        _selectionText = value;
                        OnPropertyChanged("SelectionText");
                    }
                }
            }
            [XmlElement("p")]
            public XCollection<ExtractTextElement> ExtractText
            {
                get { return _extractText; }
                set
                {
                    if (!object.Equals(_extractText, value))
                    {
                        OnPropertyChangingOld("ExtractText", _extractText, value);
                        _extractText = value;
                        OnPropertyChanged("ExtractText");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Extract)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _originalLocation = other._originalLocation;
                _selection = other._selection;
                _selectionText = other._selectionText;

                if (cloning)
                {
                    _extractText = other._extractText == null ? null : (XCollection<ExtractTextElement>)other._extractText.Clone(deepCloning);
                }
                else
                {
                    if (_extractText != null)
                    {
                        if (other._extractText != null)
                        {
                            _extractText.Update(other._extractText);
                        }
                        else
                        {
                            _extractText = null;
                        }
                    }
                    else
                    {
                        if (other._extractText != null)
                        {
                            _extractText = (XCollection<ExtractTextElement>)other._extractText.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Extract source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Extract source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Extract;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_originalLocation, other._originalLocation))
                {
                    return false;
                }

                if (!object.Equals(_selection, other._selection))
                {
                    return false;
                }

                if (!object.Equals(_selectionText, other._selectionText))
                {
                    return false;
                }

                if (!object.Equals(_extractText, other._extractText))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_originalLocation != null)
                {
                    hashCode = hashCode * 37 + _originalLocation.GetHashCode();
                }

                if (_selection != null)
                {
                    hashCode = hashCode * 37 + _selection.GetHashCode();
                }

                if (_selectionText != null)
                {
                    hashCode = hashCode * 37 + _selectionText.GetHashCode();
                }

                if (_extractText != null)
                {
                    hashCode = hashCode * 37 + _extractText.GetHashCode();
                }

                return hashCode;
            }
            #endregion

            #region public class ExtractTextElement
            [XmlRoot]
            public partial class ExtractTextElement : XObject, IXmlSerializable
            {
                #region Fields
                #endregion

                #region Properties
                #endregion

                #region ProcessCopy
                protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
                {
                    base.ProcessCopy(source, cloning, deepCloning);

                    var other = (ExtractTextElement)source;

                    BeforeProcessCopy(other, cloning, deepCloning);


                    AfterProcessCopy(other, cloning, deepCloning);
                }

                partial void BeforeProcessCopy(ExtractTextElement source, bool cloning, bool deepCloning);
                partial void AfterProcessCopy(ExtractTextElement source, bool cloning, bool deepCloning);
                #endregion
                #region Equals/GetHashCode
                public override bool Equals(object otherObject)
                {
                    var other = otherObject as ExtractTextElement;

                    if (other == null)
                    {
                        return false;
                    }

                    return true;
                }

                public override int GetHashCode()
                {
                    int hashCode = 17;

                    return hashCode;
                }
                #endregion

            }
            #endregion
        }
        #endregion
    }
    #endregion
    #region public class Genre
    [XmlRoot("catalit-genres")]
    public partial class Genre : XObject, IXIdentified<int>
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _title;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _token;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Genre> _children;
        #endregion

        #region Properties
        [XmlAttribute("id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        [XmlAttribute("title")]
        public string Title
        {
            get { return _title; }
            set
            {
                if (!object.Equals(_title, value))
                {
                    OnPropertyChangingOld("Title", _title, value);
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        [XmlAttribute("token")]
        public string Token
        {
            get { return _token; }
            set
            {
                if (!object.Equals(_token, value))
                {
                    OnPropertyChangingOld("Token", _token, value);
                    _token = value;
                    OnPropertyChanged("Token");
                }
            }
        }
        [XmlElement("genre")]
        public XCollection<Genre> Children
        {
            get { return _children; }
            set
            {
                if (!object.Equals(_children, value))
                {
                    OnPropertyChangingOld("Children", _children, value);
                    _children = value;
                    OnPropertyChanged("Children");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Genre)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _id = other._id;
            _title = other._title;
            _token = other._token;

            if (cloning)
            {
                _children = other._children == null ? null : (XCollection<Genre>)other._children.Clone(deepCloning);
            }
            else
            {
                if (_children != null)
                {
                    if (other._children != null)
                    {
                        _children.Update(other._children);
                    }
                    else
                    {
                        _children = null;
                    }
                }
                else
                {
                    if (other._children != null)
                    {
                        _children = (XCollection<Genre>)other._children.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Genre source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Genre source, bool cloning, bool deepCloning);
        #endregion
        #region CreateKey
        protected override XKey CreateKey()
        {
            XKey key = base.CreateKey();

            key = key.WithKey("Id", _id);

            return key;
        }
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Genre;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            if (!object.Equals(_title, other._title))
            {
                return false;
            }

            if (!object.Equals(_token, other._token))
            {
                return false;
            }

            if (!object.Equals(_children, other._children))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            hashCode = hashCode * 37 + _id.GetHashCode();

            if (_title != null)
            {
                hashCode = hashCode * 37 + _title.GetHashCode();
            }

            if (_token != null)
            {
                hashCode = hashCode * 37 + _token.GetHashCode();
            }

            if (_children != null)
            {
                hashCode = hashCode * 37 + _children.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class AddRecenseResponse
    [XmlRoot("catalit-add-recenses-ok")]
    public partial class AddRecenseResponse : XObject
    {
        #region Fields
        #endregion

        #region Properties
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (AddRecenseResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(AddRecenseResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(AddRecenseResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as AddRecenseResponse;

            if (other == null)
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class RecensesResponse
    [XmlRoot("catalit-recenses")]
    public partial class RecensesResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RecensesInfo _recensesInfo;
        #endregion

        #region Properties
        [XmlElement("book-recenses")]
        public RecensesInfo RecensesInfo
        {
            get { return _recensesInfo; }
            set
            {
                if (!object.Equals(_recensesInfo, value))
                {
                    OnPropertyChangingOld("RecensesInfo", _recensesInfo, value);
                    _recensesInfo = value;
                    OnPropertyChanged("RecensesInfo");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (RecensesResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            if (cloning)
            {
                _recensesInfo = other._recensesInfo == null ? null : (RecensesInfo)other._recensesInfo.Clone(deepCloning);
            }
            else
            {
                if (_recensesInfo != null)
                {
                    if (other._recensesInfo != null)
                    {
                        _recensesInfo.Update(other._recensesInfo);
                    }
                    else
                    {
                        _recensesInfo = null;
                    }
                }
                else
                {
                    if (other._recensesInfo != null)
                    {
                        _recensesInfo = (RecensesInfo)other._recensesInfo.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(RecensesResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(RecensesResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as RecensesResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_recensesInfo, other._recensesInfo))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_recensesInfo != null)
            {
                hashCode = hashCode * 37 + _recensesInfo.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class RecensesInfo
    [XmlRoot]
    public partial class RecensesInfo : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Recense> _recenses;
        #endregion

        #region Properties
        [XmlElement("recense")]
        public XCollection<Recense> Recenses
        {
            get { return _recenses; }
            set
            {
                if (!object.Equals(_recenses, value))
                {
                    OnPropertyChangingOld("Recenses", _recenses, value);
                    _recenses = value;
                    OnPropertyChanged("Recenses");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (RecensesInfo)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            if (cloning)
            {
                _recenses = other._recenses == null ? null : (XCollection<Recense>)other._recenses.Clone(deepCloning);
            }
            else
            {
                if (_recenses != null)
                {
                    if (other._recenses != null)
                    {
                        _recenses.Update(other._recenses);
                    }
                    else
                    {
                        _recenses = null;
                    }
                }
                else
                {
                    if (other._recenses != null)
                    {
                        _recenses = (XCollection<Recense>)other._recenses.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(RecensesInfo source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(RecensesInfo source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as RecensesInfo;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_recenses, other._recenses))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_recenses != null)
            {
                hashCode = hashCode * 37 + _recenses.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Recense
    [XmlRoot]
    public partial class Recense : XObject, IXIdentified<int>
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _added;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _login;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _user;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _answerTo;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _caption;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Hidden _textRecense;
        #endregion

        #region Properties
        [XmlAttribute("id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        [XmlAttribute("added")]
        public string Added
        {
            get { return _added; }
            set
            {
                if (!object.Equals(_added, value))
                {
                    OnPropertyChangingOld("Added", _added, value);
                    _added = value;
                    OnPropertyChanged("Added");
                }
            }
        }
        [XmlAttribute("login")]
        public string Login
        {
            get { return _login; }
            set
            {
                if (!object.Equals(_login, value))
                {
                    OnPropertyChangingOld("Login", _login, value);
                    _login = value;
                    OnPropertyChanged("Login");
                }
            }
        }
        [XmlAttribute("user")]
        public string User
        {
            get { return _user; }
            set
            {
                if (!object.Equals(_user, value))
                {
                    OnPropertyChangingOld("User", _user, value);
                    _user = value;
                    OnPropertyChanged("User");
                }
            }
        }
        [XmlAttribute("answer_to")]
        public string AnswerTo
        {
            get { return _answerTo; }
            set
            {
                if (!object.Equals(_answerTo, value))
                {
                    OnPropertyChangingOld("AnswerTo", _answerTo, value);
                    _answerTo = value;
                    OnPropertyChanged("AnswerTo");
                }
            }
        }
        [XmlAttribute("caption")]
        public string Caption
        {
            get { return _caption; }
            set
            {
                if (!object.Equals(_caption, value))
                {
                    OnPropertyChangingOld("Caption", _caption, value);
                    _caption = value;
                    OnPropertyChanged("Caption");
                }
            }
        }
        [XmlElement("text_recense")]
        public Hidden TextRecense
        {
            get { return _textRecense; }
            set
            {
                if (!object.Equals(_textRecense, value))
                {
                    OnPropertyChangingOld("TextRecense", _textRecense, value);
                    _textRecense = value;
                    OnPropertyChanged("TextRecense");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Recense)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _id = other._id;
            _added = other._added;
            _login = other._login;
            _user = other._user;
            _answerTo = other._answerTo;
            _caption = other._caption;

            if (cloning)
            {
                _textRecense = other._textRecense == null ? null : (Hidden)other._textRecense.Clone(deepCloning);
            }
            else
            {
                if (_textRecense != null)
                {
                    if (other._textRecense != null)
                    {
                        _textRecense.Update(other._textRecense);
                    }
                    else
                    {
                        _textRecense = null;
                    }
                }
                else
                {
                    if (other._textRecense != null)
                    {
                        _textRecense = (Hidden)other._textRecense.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Recense source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Recense source, bool cloning, bool deepCloning);
        #endregion
        #region CreateKey
        protected override XKey CreateKey()
        {
            XKey key = base.CreateKey();

            key = key.WithKey("Id", _id);

            return key;
        }
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Recense;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            if (!object.Equals(_added, other._added))
            {
                return false;
            }

            if (!object.Equals(_login, other._login))
            {
                return false;
            }

            if (!object.Equals(_user, other._user))
            {
                return false;
            }

            if (!object.Equals(_answerTo, other._answerTo))
            {
                return false;
            }

            if (!object.Equals(_caption, other._caption))
            {
                return false;
            }

            if (!object.Equals(_textRecense, other._textRecense))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            hashCode = hashCode * 37 + _id.GetHashCode();

            if (_added != null)
            {
                hashCode = hashCode * 37 + _added.GetHashCode();
            }

            if (_login != null)
            {
                hashCode = hashCode * 37 + _login.GetHashCode();
            }

            if (_user != null)
            {
                hashCode = hashCode * 37 + _user.GetHashCode();
            }

            if (_answerTo != null)
            {
                hashCode = hashCode * 37 + _answerTo.GetHashCode();
            }

            if (_caption != null)
            {
                hashCode = hashCode * 37 + _caption.GetHashCode();
            }

            if (_textRecense != null)
            {
                hashCode = hashCode * 37 + _textRecense.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class PersonsResponse
    [XmlRoot("catalit-persons")]
    public partial class PersonsResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Person> _persons;
        #endregion

        #region Properties
        [XmlElement("subject")]
        public XCollection<Person> Persons
        {
            get { return _persons; }
            set
            {
                if (!object.Equals(_persons, value))
                {
                    OnPropertyChangingOld("Persons", _persons, value);
                    _persons = value;
                    OnPropertyChanged("Persons");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (PersonsResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            if (cloning)
            {
                _persons = other._persons == null ? null : (XCollection<Person>)other._persons.Clone(deepCloning);
            }
            else
            {
                if (_persons != null)
                {
                    if (other._persons != null)
                    {
                        _persons.Update(other._persons);
                    }
                    else
                    {
                        _persons = null;
                    }
                }
                else
                {
                    if (other._persons != null)
                    {
                        _persons = (XCollection<Person>)other._persons.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(PersonsResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(PersonsResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as PersonsResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_persons, other._persons))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_persons != null)
            {
                hashCode = hashCode * 37 + _persons.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Person
    [XmlRoot]
    public partial class Person : XObject, IXIdentified<string>
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PersonTitle _title;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _firstName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _middleName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _lastName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _photo;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Hidden _textDescription;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _artsCount;
        #endregion
        
        #region Properties
        [XmlAttribute("id")]
        public string Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        [XmlElement("arts-count")]
        public int ArtsCount
        {
            get { return _artsCount; }
            set
            {
                if (!object.Equals(_artsCount, value))
                {
                    OnPropertyChangingOld("ArtsCount", _artsCount, value);
                    _artsCount = value;
                    OnPropertyChanged("ArtsCount");
                }
            }
        }
        [XmlElement("title")]
        public PersonTitle Title
        {
            get { return _title; }
            set
            {
                if (!object.Equals(_title, value))
                {
                    OnPropertyChangingOld("Title", _title, value);
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        [XmlElement("first-name")]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (!object.Equals(_firstName, value))
                {
                    OnPropertyChangingOld("FirstName", _firstName, value);
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        [XmlElement("middle-name")]
        public string MiddleName
        {
            get { return _middleName; }
            set
            {
                if (!object.Equals(_middleName, value))
                {
                    OnPropertyChangingOld("MiddleName", _middleName, value);
                    _middleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        [XmlElement("last-name")]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (!object.Equals(_lastName, value))
                {
                    OnPropertyChangingOld("LastName", _lastName, value);
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        [XmlElement("photo")]
        public string Photo
        {
            get { return _photo; }
            set
            {
                if (!object.Equals(_photo, value))
                {
                    OnPropertyChangingOld("Photo", _photo, value);
                    _photo = value;
                    OnPropertyChanged("Photo");
                }
            }
        }
        [XmlElement("text_descr_html")]
        public Hidden TextDescription
        {
            get { return _textDescription; }
            set
            {
                if (!object.Equals(_textDescription, value))
                {
                    OnPropertyChangingOld("TextDescription", _textDescription, value);
                    _textDescription = value;
                    OnPropertyChanged("TextDescription");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Person)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _id = other._id;
            _firstName = other._firstName;
            _middleName = other._middleName;
            _lastName = other._lastName;
            _photo = other._photo;

            if (cloning)
            {
                _title = other._title == null ? null : (PersonTitle)other._title.Clone(deepCloning);
                _textDescription = other._textDescription == null ? null : (Hidden)other._textDescription.Clone(deepCloning);
            }
            else
            {
                if (_title != null)
                {
                    if (other._title != null)
                    {
                        _title.Update(other._title);
                    }
                    else
                    {
                        _title = null;
                    }
                }
                else
                {
                    if (other._title != null)
                    {
                        _title = (PersonTitle)other._title.Clone(false);
                    }
                }
                if (_textDescription != null)
                {
                    if (other._textDescription != null)
                    {
                        _textDescription.Update(other._textDescription);
                    }
                    else
                    {
                        _textDescription = null;
                    }
                }
                else
                {
                    if (other._textDescription != null)
                    {
                        _textDescription = (Hidden)other._textDescription.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Person source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Person source, bool cloning, bool deepCloning);
        #endregion
        #region CreateKey
        protected override XKey CreateKey()
        {
            XKey key = base.CreateKey();

            key = key.WithKey("Id", _id);

            return key;
        }
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Person;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            if (!object.Equals(_title, other._title))
            {
                return false;
            }

            if (!object.Equals(_firstName, other._firstName))
            {
                return false;
            }

            if (!object.Equals(_middleName, other._middleName))
            {
                return false;
            }

            if (!object.Equals(_lastName, other._lastName))
            {
                return false;
            }

            if (!object.Equals(_photo, other._photo))
            {
                return false;
            }

            if (!object.Equals(_textDescription, other._textDescription))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_id != null)
            {
                hashCode = hashCode * 37 + _id.GetHashCode();
            }

            if (_title != null)
            {
                hashCode = hashCode * 37 + _title.GetHashCode();
            }

            if (_firstName != null)
            {
                hashCode = hashCode * 37 + _firstName.GetHashCode();
            }

            if (_middleName != null)
            {
                hashCode = hashCode * 37 + _middleName.GetHashCode();
            }

            if (_lastName != null)
            {
                hashCode = hashCode * 37 + _lastName.GetHashCode();
            }

            if (_photo != null)
            {
                hashCode = hashCode * 37 + _photo.GetHashCode();
            }

            if (_textDescription != null)
            {
                hashCode = hashCode * 37 + _textDescription.GetHashCode();
            }

            return hashCode;
        }
        #endregion

        #region public class PersonTitle
        [XmlRoot]
        public partial class PersonTitle : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _main;
            #endregion

            #region Properties
            [XmlElement("main")]
            public string Main
            {
                get { return _main; }
                set
                {
                    if (!object.Equals(_main, value))
                    {
                        OnPropertyChangingOld("Main", _main, value);
                        _main = value;
                        OnPropertyChanged("Main");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (PersonTitle)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _main = other._main;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(PersonTitle source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(PersonTitle source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as PersonTitle;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_main, other._main))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_main != null)
                {
                    hashCode = hashCode * 37 + _main.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
    }
    #endregion

    #region public class Hidden
    [XmlRoot]
    public partial class Hidden : XObject, IXmlSerializable
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _text;
        #endregion

        #region Properties
        [XmlElement]
        public string Text
        {
            get { return _text; }
            set
            {
                if (!object.Equals(_text, value))
                {
                    OnPropertyChangingOld("Text", _text, value);
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Hidden)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _text = other._text;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Hidden source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Hidden source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Hidden;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_text, other._text))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_text != null)
            {
                hashCode = hashCode * 37 + _text.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }

    [XmlRoot]
    public partial class Note : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _text;
        #endregion

        #region Properties
        [XmlElement("p")]
        public string Text
        {
            get { return _text; }
            set
            {
                if (!object.Equals(_text, value))
                {
                    OnPropertyChangingOld("P", _text, value);
                    _text = value;
                    OnPropertyChanged("P");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Note)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _text = other._text;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Note source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Note source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Note;

            if (other == null)
            {
                return false;
            }

            if (!string.Equals(_text, other._text))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_text != null)
            {
                hashCode = hashCode * 37 + _text.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }

    #endregion
    #region public class CatalogSearchResponse
    [XmlRoot("catalit-fb2-books")]
    public partial class CatalogSearchResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _now;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _account;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _pages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _records;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Book> _books;
        #endregion

        #region Properties
        [XmlAttribute("now")]
        public string Now
        {
            get { return _now; }
            set
            {
                if (!object.Equals(_now, value))
                {
                    OnPropertyChangingOld("Now", _now, value);
                    _now = value;
                    OnPropertyChanged("Now");
                }
            }
        }
        [XmlAttribute("account")]
        public double Account
        {
            get { return _account; }
            set
            {
                if (!object.Equals(_account, value))
                {
                    OnPropertyChangingOld("Account", _account, value);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        [XmlAttribute("pages")]
        public int Pages
        {
            get { return _pages; }
            set
            {
                if (!object.Equals(_pages, value))
                {
                    OnPropertyChangingOld("Pages", _pages, value);
                    _pages = value;
                    OnPropertyChanged("Pages");
                }
            }
        }
        [XmlAttribute("records")]
        public int Records
        {
            get { return _records; }
            set
            {
                if (!object.Equals(_records, value))
                {
                    OnPropertyChangingOld("Records", _records, value);
                    _records = value;
                    OnPropertyChanged("Records");
                }
            }
        }
        [XmlElement("fb2-book")]
        public XCollection<Book> Books
        {
            get { return _books; }
            set
            {
                if (!object.Equals(_books, value))
                {
                    OnPropertyChangingOld("Books", _books, value);
                    _books = value;
                    OnPropertyChanged("Books");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (CatalogSearchResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _now = other._now;
            _account = other._account;
            _pages = other._pages;
            _records = other._records;

            if (cloning)
            {
                _books = other._books == null ? null : (XCollection<Book>)other._books.Clone(deepCloning);
            }
            else
            {
                if (_books != null)
                {
                    if (other._books != null)
                    {
                        _books.Update(other._books);
                    }
                    else
                    {
                        _books = null;
                    }
                }
                else
                {
                    if (other._books != null)
                    {
                        _books = (XCollection<Book>)other._books.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(CatalogSearchResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(CatalogSearchResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as CatalogSearchResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_now, other._now))
            {
                return false;
            }

            if (!object.Equals(_account, other._account))
            {
                return false;
            }

            if (!object.Equals(_pages, other._pages))
            {
                return false;
            }

            if (!object.Equals(_records, other._records))
            {
                return false;
            }

            if (!object.Equals(_books, other._books))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_now != null)
            {
                hashCode = hashCode * 37 + _now.GetHashCode();
            }

            hashCode = hashCode * 37 + _account.GetHashCode();

            hashCode = hashCode * 37 + _pages.GetHashCode();

            hashCode = hashCode * 37 + _records.GetHashCode();

            if (_books != null)
            {
                hashCode = hashCode * 37 + _books.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class TileBook
    [XmlRoot]
    public partial class TileBook : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _cover;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _bookTitle;
        #endregion

        #region Properties
        [XmlAttribute("cover")]
        public string Cover
        {
            get { return _cover; }
            set
            {
                if (!object.Equals(_cover, value))
                {
                    OnPropertyChangingOld("Cover", _cover, value);
                    _cover = value;
                    OnPropertyChanged("Cover");
                }
            }
        }
        [XmlAttribute("book-title")]
        public string BookTitle
        {
            get { return _bookTitle; }
            set
            {
                if (!object.Equals(_bookTitle, value))
                {
                    OnPropertyChangingOld("BookTitle", _bookTitle, value);
                    _bookTitle = value;
                    OnPropertyChanged("BookTitle");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (TileBook)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _cover = other._cover;
            _bookTitle = other._bookTitle;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(TileBook source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(TileBook source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as TileBook;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_cover, other._cover))
            {
                return false;
            }

            if (!object.Equals(_bookTitle, other._bookTitle))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_cover != null)
            {
                hashCode = hashCode * 37 + _cover.GetHashCode();
            }

            if (_bookTitle != null)
            {
                hashCode = hashCode * 37 + _bookTitle.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Book
    [XmlRoot("fb2-book")]
    public partial class Book : XObject, IXIdentified<int>
    {
        #region Constants
        private const string AvailableDrm = "1";
        private const string UnavailableDrm = "2";
        #endregion

        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isMyBook;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isInPurchase;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isEmptyElement;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _inappName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _inappPrice;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _added;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _updatedTime;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _basePrice;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _price;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _chars;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _bookmarksCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _images;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _zipSize;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _hasTrial;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _cover;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _coverPreview;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _url;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _rating;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _recenses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _type;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _drm;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _copyright;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _readedPercent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _trialId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _basket;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _inGifts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _itemsLeft;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FilesInfo _files;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CategoriesInfo _categories;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SequencesInfo _sequences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TagsInfo _tags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TextDescription _description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isLibraryAccountBook;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _expiredDate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isExpiredBook;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isFragmentBook;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isHiddenBook;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _selfService;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _selfServiceMyRequest;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _selfServiceQueueSize;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _selfServiceBusy;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _selfServiceBooksCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _isLocal;
        #endregion


        public enum BookType
        {
            Fb2 = 0,
            AudioBook = 1,
            MultimediaBook = 2,
            DeviceForReading = 3,
            Pdf = 4
        };

        public enum BookGroup
        {
            PdfFragmentGroup = 9,
            PdfFullGroup = 10
        };

        #region Properties
        [XmlAttribute("hub_id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        public bool IsMyBook
        {
            get { return this._isMyBook; }
            set
            {
                if (this._isMyBook != value)
                {
                    OnPropertyChangingOld("IsMyBook", this._isMyBook, value);
                    this._isMyBook = value;
                    OnPropertyChanged("IsMyBook");
                    OnPropertyChanged("StoreProductPurchaseValue");
                }
            }
        }

        public bool IsLocal
        {
            get { return _isLocal; }
            set
            {
                if (!object.Equals(_isLocal, value))
                {
                    OnPropertyChangingOld("IsLocal", _isLocal, value);
                    _isLocal = value;
                    OnPropertyChanged("IsLocal");
                }
            }
        }

        public bool IsBookWithPrice
        {
            get { return (IsMyBook || isFreeBook || isLibraryAccountBook); }
        }

        public bool IsInPurchase
        {
            get { return _isInPurchase; }
            set
            {
                if (!object.Equals(_isInPurchase, value))
                {
                    OnPropertyChangingOld("IsInPurchase", _isInPurchase, value);
                    _isInPurchase = value;
                    OnPropertyChanged("IsInPurchase");
                }
            }
        }
        public bool IsEmptyElement
        {
            get { return _isEmptyElement; }
            set
            {
                if (!object.Equals(_isEmptyElement, value))
                {
                    OnPropertyChangingOld("IsEmptyElement", _isEmptyElement, value);
                    _isEmptyElement = value;
                    OnPropertyChanged("IsEmptyElement");
                }
            }
        }
        [XmlAttribute("inapp_name")]
        public string InappName
        {
            get { return _inappName; }
            set
            {
                if (!object.Equals(_inappName, value))
                {
                    OnPropertyChangingOld("InappName", _inappName, value);
                    _inappName = value;
                    OnPropertyChanged("InappName");
                }
            }
        }
        [XmlAttribute("inapp_price")]
        public double InappPrice
        {
            get { return _inappPrice; }
            set
            {
                if (!object.Equals(_inappPrice, value))
                {
                    OnPropertyChangingOld("InappPrice", _inappPrice, value);
                    _inappPrice = value;
                    OnPropertyChanged("InappPrice");
                }
            }
        }
        public string StoreProductPurchaseValue
        {
            get
            {
                if (isFreeBook || (isLibraryAccountBook && !IsMyBook)) return string.Empty;
                else if ((isLibraryAccountBook && IsMyBook) || (IsMyBook && ExpiredDateStr != null)) return (!string.IsNullOrEmpty(SelfServiceMyRequest) && SelfServiceMyRequest.Equals("0")) ? "абонемент" : "запрошено";
                else if (IsMyBook && !string.IsNullOrEmpty(SelfServiceMyRequest) && !SelfServiceMyRequest.Equals("0")) return "запрошено";
                else if (IsMyBook && !isFragment) return "куплено";
                return Price.ToString();
            }
        }
        [XmlAttribute("added")]
        public string Added
        {
            get { return _added; }
            set
            {
                if (!object.Equals(_added, value))
                {
                    OnPropertyChangingOld("Added", _added, value);
                    _added = value;
                    OnPropertyChanged("Added");
                }
            }
        }
        [XmlAttribute("updated")]
        public string UpdatedTime
        {
            get { return _updatedTime; }
            set
            {
                if (!object.Equals(_updatedTime, value))
                {
                    OnPropertyChangingOld("UpdatedTime", _updatedTime, value);
                    _updatedTime = value;
                    OnPropertyChanged("UpdatedTime");
                }
            }
        }
        [XmlAttribute("base_price")]
        public double BasePrice
        {
            get { return _basePrice; }
            set
            {
                if (!object.Equals(_basePrice, value))
                {
                    OnPropertyChangingOld("BasePrice", _basePrice, value);
                    _basePrice = value;
                    OnPropertyChanged("BasePrice");
                }
            }
        }
        [XmlAttribute("price")]
        public double Price
        {
            get { return _price; }
            set
            {
                if (!object.Equals(_price, value))
                {
                    OnPropertyChangingOld("Price", _price, value);
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        [XmlAttribute("chars")]
        public string Chars
        {
            get { return _chars; }
            set
            {
                if (!object.Equals(_chars, value))
                {
                    OnPropertyChangingOld("Chars", _chars, value);
                    _chars = value;
                    OnPropertyChanged("Chars");
                }
            }
        }
        public int Pages
        {
            set
            {
                var res = (value * 1600);
                Chars = res.ToString(CultureInfo.CurrentCulture);
            }
            get
            {
                if (TypeBook == BookType.Pdf)
                {
                    if (_files.FullPdfFile != null)
                    {
                        return _files.FullPdfFile.Seconds;
                    }
                }

                return (int)Math.Ceiling(((string.IsNullOrEmpty(Chars) ? 0 : Convert.ToInt32(Chars)) / 1600 + ((string.IsNullOrEmpty(Images) ? 1 : Convert.ToInt32(Images)) - 1) * 0.6) / 10) * 10;
            }
        }
        public int BookmarksCount
        {
            get { return _bookmarksCount; }
            set
            {
                if (!object.Equals(_bookmarksCount, value))
                {
                    OnPropertyChangingOld("BookmarksCount", _bookmarksCount, value);
                    _bookmarksCount = value;
                    OnPropertyChanged("BookmarksCount");
                }
            }
        }
        [XmlAttribute("images")]
        public string Images
        {
            get { return _images; }
            set
            {
                if (!object.Equals(_images, value))
                {
                    OnPropertyChangingOld("Images", _images, value);
                    _images = value;
                    OnPropertyChanged("Images");
                }
            }
        }
        [XmlAttribute("zip_size")]
        public string ZipSize
        {
            get { return _zipSize; }
            set
            {
                if (!object.Equals(_zipSize, value))
                {
                    OnPropertyChangingOld("ZipSize", _zipSize, value);
                    _zipSize = value;
                    OnPropertyChanged("ZipSize");
                }
            }
        }
        [XmlAttribute("has_trial")]
        public string HasTrial
        {
            get { return _hasTrial; }
            set
            {
                if (!object.Equals(_hasTrial, value))
                {
                    OnPropertyChangingOld("HasTrial", _hasTrial, value);
                    _hasTrial = value;
                    OnPropertyChanged("HasTrial");
                }
            }
        }

        [XmlAttribute("cover")]
        public string Cover
        {
            get { return _cover; }
            set
            {
                if (!object.Equals(_cover, value))
                {
                    OnPropertyChangingOld("Cover", _cover, value);
                    _cover = value;
                    OnPropertyChanged("Cover");
                }
            }
        }
        [XmlAttribute("cover_preview")]
        public string CoverPreview
        {
            get { return _coverPreview; }
            set
            {
                if (!object.Equals(_coverPreview, value))
                {
                    OnPropertyChangingOld("CoverPreview", _coverPreview, value);
                    _coverPreview = value;
                    OnPropertyChanged("CoverPreview");
                }
            }
        }
        public string CoverPreviewSized
        {
            get { return (!string.IsNullOrEmpty(CoverPreview) && CoverPreview.Contains('_')) ? CoverPreview.Substring(0, CoverPreview.LastIndexOf('_')) + "_123.jpg" : CoverPreview; }
        }
        [XmlAttribute("url")]
        public string Url
        {
            get { return _url; }
            set
            {
                if (!object.Equals(_url, value))
                {
                    OnPropertyChangingOld("Url", _url, value);
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        [XmlAttribute("rating")]
        public string Rating
        {
            get { return _rating; }
            set
            {
                if (!object.Equals(_rating, value))
                {
                    OnPropertyChangingOld("Rating", _rating, value);
                    _rating = value;
                    OnPropertyChanged("Rating");
                }
            }
        }
        [XmlAttribute("recenses")]
        public string Recenses
        {
            get { return _recenses; }
            set
            {
                if (!object.Equals(_recenses, value))
                {
                    OnPropertyChangingOld("Recenses", _recenses, value);
                    _recenses = value;
                    OnPropertyChanged("Recenses");
                }
            }
        }
        [XmlAttribute("type")]
        public string Type
        {
            get { return _type; }
            set
            {
                if (!object.Equals(_type, value))
                {
                    OnPropertyChangingOld("Type", _type, value);
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }

        public BookType TypeBook
        {
            get
            {
                switch (_type)
                {
                    case "0":
                        return BookType.Fb2;
                    case "1":
                        return BookType.AudioBook;
                    case "2":
                        return BookType.MultimediaBook;
                    case "3":
                        return BookType.DeviceForReading;
                    case "4":
                        return BookType.Pdf;
                    default:
                        return BookType.Fb2;
                }
            }
        }

        [XmlAttribute("drm")]
        public string Drm
        {
            get { return _drm; }
            set
            {
                if (!string.Equals(_drm, value))
                {
                    OnPropertyChangingOld("Drm", _drm, value);
                    _drm = value;
                    OnPropertyChanged("Drm");
                }
            }
        }
        [XmlAttribute("copyright")]
        public string Copyright
        {
            get { return _copyright; }
            set
            {
                if (!object.Equals(_copyright, value))
                {
                    OnPropertyChangingOld("Copyright", _copyright, value);
                    _copyright = value;
                    OnPropertyChanged("Copyright");
                }
            }
        }
        [XmlAttribute("readed_percent")]
        public string ReadedPercentStr
        {
            get
            {
                return _readedPercent.ToString();
            }
            set
            {
                if (!string.IsNullOrEmpty(value)) ReadedPercent = Convert.ToInt32(value);
            }
        }
        public int ReadedPercent
        {
            get { return _readedPercent; }
            set
            {
                if (!object.Equals(_readedPercent, value))
                {
                    OnPropertyChangingOld("ReadedPercent", _readedPercent, value);
                    _readedPercent = value;
                    OnPropertyChanged("ReadedPercent");
                }
            }
        }
        [XmlAttribute("trial_id")]
        public string TrialId
        {
            get { return _trialId; }
            set
            {
                if (!object.Equals(_trialId, value))
                {
                    OnPropertyChangingOld("TrialId", _trialId, value);
                    _trialId = value;
                    OnPropertyChanged("TrialId");
                }
            }
        }
        [XmlAttribute("basket")]
        public string Basket
        {
            get { return _basket; }
            set
            {
                if (!object.Equals(_basket, value))
                {
                    OnPropertyChangingOld("Basket", _basket, value);
                    _basket = value;
                    OnPropertyChanged("Basket");
                }
            }
        }
        [XmlAttribute("in_gifts")]
        public string InGifts
        {
            get { return _inGifts; }
            set
            {
                if (!object.Equals(_inGifts, value))
                {
                    OnPropertyChangingOld("InGifts", _inGifts, value);
                    _inGifts = value;
                    OnPropertyChanged("InGifts");
                }
            }
        }
        [XmlAttribute("items_left")]
        public string ItemsLeft
        {
            get { return _itemsLeft; }
            set
            {
                if (!object.Equals(_itemsLeft, value))
                {
                    OnPropertyChangingOld("ItemsLeft", _itemsLeft, value);
                    _itemsLeft = value;
                    OnPropertyChanged("ItemsLeft");
                }
            }
        }
        [XmlElement("files")]
        public FilesInfo Files
        {
            get { return _files; }
            set
            {
                if (!object.Equals(_files, value))
                {
                    OnPropertyChangingOld("Files", _files, value);
                    _files = value;
                    OnPropertyChanged("Files");
                }
            }
        }

        [XmlElement("categories")]
        public CategoriesInfo Categories
        {
            get { return _categories; }
            set
            {
                if (!object.Equals(_categories, value))
                {
                    OnPropertyChangingOld("Categories", _categories, value);
                    _categories = value;
                    OnPropertyChanged("Categories");
                }
            }
        }

        public bool isFreeBook
        {
            get
            {
                if (_categories == null) return false;
                return _categories.isFreeBook;
            }
        }

        public bool isFragment
        {
            get { return _isFragmentBook; }
            set
            {
                if (!object.Equals(_isFragmentBook, value))
                {
                    OnPropertyChangingOld("isFragment", _isFragmentBook, value);
                    _isFragmentBook = value;
                    OnPropertyChanged("isFragment");
                }
            }
        }
        public bool isHiddenBook
        {
            get { return _isHiddenBook; }
            set
            {
                if (!object.Equals(_isHiddenBook, value))
                {
                    OnPropertyChangingOld("isHiddenBook", _isHiddenBook, value);
                    _isHiddenBook = value;
                    OnPropertyChanged("isHiddenBook");
                }
            }
        }

        public bool IsExpiredBook
        {
            get { return _isExpiredBook; }
            set
            {
                if (!object.Equals(_isExpiredBook, value))
                {
                    OnPropertyChangingOld("IsExpiredBook", _isExpiredBook, value);
                    _isExpiredBook = value;
                    OnPropertyChanged("IsExpiredBook");
                }
            }
        }

        [XmlElement("sequences")]
        public SequencesInfo Sequences
        {
            get { return _sequences; }
            set
            {
                if (!object.Equals(_sequences, value))
                {
                    OnPropertyChangingOld("Sequences", _files, value);
                    _sequences = value;
                    OnPropertyChanged("Sequences");
                }
            }
        }

        [XmlElement("art_tags")]
        public TagsInfo Tags
        {
            get { return _tags; }
            set
            {
                if (!object.Equals(_tags, value))
                {
                    OnPropertyChangingOld("Tags", _tags, value);
                    _tags = value;
                    OnPropertyChanged("Tags");
                }
            }
        }
        [XmlElement("text_description")]
        public TextDescription Description
        {
            get { return _description; }
            set
            {
                if (!object.Equals(_description, value))
                {
                    OnPropertyChangingOld("Description", _description, value);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }

        public bool isLibraryAccountBook
        {
            get { return _isLibraryAccountBook; }
            set
            {
                if (!object.Equals(_isLibraryAccountBook, value))
                {
                    OnPropertyChangingOld("isLibrary", _isLibraryAccountBook, value);
                    _isLibraryAccountBook = value;
                    OnPropertyChanged("isLibrary");
                }
            }
        }

        [XmlAttribute("valid_till")]
        public string ExpiredDateStr
        {
            get { return _expiredDate; }
            set
            {
                if (!object.Equals(_expiredDate, value))
                {
                    OnPropertyChangingOld("ExpiredDate", _expiredDate, value);
                    _expiredDate = value;
                    OnPropertyChanged("ExpiredDate");
                }
            }
        }

        [XmlAttribute("biblio_selfservice")]
        public string SelfService
        {
            get { return _selfService; }
            set
            {
                if (!object.Equals(_selfService, value))
                {
                    OnPropertyChangingOld("SelfService", _selfService, value);
                    _selfService = value;
                    OnPropertyChanged("SelfService");
                }
            }
        }

        [XmlAttribute("biblio_my_request")]
        public string SelfServiceMyRequest
        {
            get { return _selfServiceMyRequest; }
            set
            {
                if (!object.Equals(_selfServiceMyRequest, value))
                {
                    OnPropertyChangingOld("SelfServiceMyRequest", _selfServiceMyRequest, value);
                    _selfServiceMyRequest = value;
                    OnPropertyChanged("SelfServiceMyRequest");
                }
            }
        }

        [XmlAttribute("biblio_queue_size")]
        public string SelfServiceQueueSize
        {
            get { return _selfServiceQueueSize; }
            set
            {
                if (!object.Equals(_selfServiceQueueSize, value))
                {
                    OnPropertyChangingOld("SelfServiceQueueSize", _selfServiceQueueSize, value);
                    _selfServiceQueueSize = value;
                    OnPropertyChanged("SelfServiceQueueSize");
                }
            }
        }

        [XmlAttribute("biblio_busy")]
        public string SelfServiceBusy
        {
            get { return _selfServiceBusy; }
            set
            {
                if (!object.Equals(_selfServiceBusy, value))
                {
                    OnPropertyChangingOld("SelfServiceBusy", _selfServiceBusy, value);
                    _selfServiceBusy = value;
                    OnPropertyChanged("SelfServiceBusy");
                }
            }
        }

        [XmlAttribute("biblio_fund")]
        public string SelfServiceBooksCount
        {
            get { return _selfServiceBooksCount; }
            set
            {
                if (!object.Equals(_selfServiceBooksCount, value))
                {
                    OnPropertyChangingOld("SelfServiceBooksCount", _selfServiceBooksCount, value);
                    _selfServiceBooksCount = value;
                    OnPropertyChanged("SelfServiceBooksCount");
                }
            }
        }

        public DateTime ExpiredDate
        {
            get { return _expiredDate != null ? DateTime.ParseExact(_expiredDate, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture) : new DateTime(0); }
        }

        public bool IsDrmOrEpub
        {
            get
            {
                //if (Id == 6883340 || Id == 4997798) return false;
                if (Files != null && Files.Files != null)
                {
                    var fb2File = Files.Files.FirstOrDefault(f => f.Type.Contains("fb2"));
                    if (fb2File == null && TypeBook != BookType.Pdf) return true;
                }

                return string.Equals(Drm, UnavailableDrm);
            }
        }

        public bool IsUnpackedDrm
        {
            get { return string.Equals(Drm, AvailableDrm); }
        }

        public string BookTitle
        {
            get
            {
                try { return Description.Hidden.TitleInfo.BookTitle; }
                catch (Exception ex) { Debug.WriteLine(ex.StackTrace); }
                return string.Empty;
            }
        }

        public override string ToString()
        {
            return string.Format("id={0}", Id);
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Book)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _id = other._id;
            _isMyBook = other._isMyBook;
            _isLocal = other._isLocal;
            _isInPurchase = other._isInPurchase;
            _isEmptyElement = other._isEmptyElement;
            _inappName = other._inappName;
            _inappPrice = other._inappPrice;
            _added = other._added;
            _updatedTime = other._updatedTime;
            _basePrice = other._basePrice;
            _price = other._price;
            _chars = other._chars;
            _bookmarksCount = other._bookmarksCount;
            _images = other._images;
            _zipSize = other._zipSize;
            _hasTrial = other._hasTrial;
            _cover = other._cover;
            _coverPreview = other._coverPreview;
            _url = other._url;
            _rating = other._rating;
            _recenses = other._recenses;
            _type = other._type;
            _drm = other._drm;
            _copyright = other._copyright;
            _readedPercent = other._readedPercent;
            _trialId = other._trialId;
            _basket = other._basket;
            _inGifts = other._inGifts;
            _itemsLeft = other._itemsLeft;
            _isLibraryAccountBook = other._isLibraryAccountBook;
            _expiredDate = other._expiredDate;
            _isExpiredBook = other._isExpiredBook;
            _isHiddenBook = other._isHiddenBook;
            _isFragmentBook = other._isFragmentBook;
            _selfService = other._selfService;
            _selfServiceMyRequest = other._selfServiceMyRequest;
            _selfServiceQueueSize = other._selfServiceQueueSize;
            _selfServiceBusy = other._selfServiceBusy;
            _selfServiceBooksCount = other._selfServiceBooksCount;

            if (cloning)
            {
                _files = other._files == null ? null : (FilesInfo)other._files.Clone(deepCloning);
                _tags = other._tags == null ? null : (TagsInfo)other._tags.Clone(deepCloning);
                _description = other._description == null ? null : (TextDescription)other._description.Clone(deepCloning);
            }
            else
            {
                if (_files != null)
                {
                    if (other._files != null)
                    {
                        _files.Update(other._files);
                    }
                    else
                    {
                        _files = null;
                    }
                }
                else
                {
                    if (other._files != null)
                    {
                        _files = (FilesInfo)other._files.Clone(false);
                    }
                }
                if (_tags != null)
                {
                    if (other._tags != null)
                    {
                        _tags.Update(other._tags);
                    }
                    else
                    {
                        _tags = null;
                    }
                }
                else
                {
                    if (other._tags != null)
                    {
                        _tags = (TagsInfo)other._tags.Clone(false);
                    }
                }
                if (_description != null)
                {
                    if (other._description != null)
                    {
                        _description.Update(other._description);
                    }
                    else
                    {
                        _description = null;
                    }
                }
                else
                {
                    if (other._description != null)
                    {
                        _description = (TextDescription)other._description.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Book source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Book source, bool cloning, bool deepCloning);
        #endregion
        #region CreateKey
        protected override XKey CreateKey()
        {
            XKey key = base.CreateKey();

            key = key.WithKey("Id", _id);

            return key;
        }
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Book;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            if (!object.Equals(_isMyBook, other._isMyBook))
            {
                return false;
            }

            if (!object.Equals(_isLocal, other._isLocal))
            {
                return false;
            }

            if (!object.Equals(_isInPurchase, other._isInPurchase))
            {
                return false;
            }

            if (!object.Equals(_isEmptyElement, other._isEmptyElement))
            {
                return false;
            }

            if (!object.Equals(_inappName, other._inappName))
            {
                return false;
            }

            if (!object.Equals(_inappPrice, other._inappPrice))
            {
                return false;
            }

            if (!object.Equals(_added, other._added))
            {
                return false;
            }

            if (!object.Equals(_updatedTime, other._updatedTime))
            {
                return false;
            }

            if (!object.Equals(_basePrice, other._basePrice))
            {
                return false;
            }

            if (!object.Equals(_price, other._price))
            {
                return false;
            }

            if (!object.Equals(_chars, other._chars))
            {
                return false;
            }

            if (!object.Equals(_bookmarksCount, other._bookmarksCount))
            {
                return false;
            }

            if (!object.Equals(_images, other._images))
            {
                return false;
            }

            if (!object.Equals(_zipSize, other._zipSize))
            {
                return false;
            }

            if (!object.Equals(_hasTrial, other._hasTrial))
            {
                return false;
            }

            if (!object.Equals(_cover, other._cover))
            {
                return false;
            }

            if (!object.Equals(_coverPreview, other._coverPreview))
            {
                return false;
            }

            if (!object.Equals(_url, other._url))
            {
                return false;
            }

            if (!object.Equals(_rating, other._rating))
            {
                return false;
            }

            if (!object.Equals(_recenses, other._recenses))
            {
                return false;
            }

            if (!object.Equals(_type, other._type))
            {
                return false;
            }

            if (!string.Equals(_drm, other._drm))
            {
                return false;
            }

            if (!object.Equals(_copyright, other._copyright))
            {
                return false;
            }

            if (!object.Equals(_readedPercent, other._readedPercent))
            {
                return false;
            }

            if (!object.Equals(_trialId, other._trialId))
            {
                return false;
            }

            if (!object.Equals(_basket, other._basket))
            {
                return false;
            }

            if (!object.Equals(_inGifts, other._inGifts))
            {
                return false;
            }

            if (!object.Equals(_itemsLeft, other._itemsLeft))
            {
                return false;
            }

            if (!object.Equals(_files, other._files))
            {
                return false;
            }

            if (!object.Equals(_tags, other._tags))
            {
                return false;
            }

            if (!object.Equals(_description, other._description))
            {
                return false;
            }

            if (!object.Equals(_isLibraryAccountBook, other._isLibraryAccountBook))
            {
                return false;
            }

            if (!object.Equals(_expiredDate, other._expiredDate))
            {
                return false;
            }

            if (!object.Equals(_isExpiredBook, other._isExpiredBook))
            {
                return false;
            }

            if (!object.Equals(_isHiddenBook, other._isHiddenBook))
            {
                return false;
            }

            if (!object.Equals(_isFragmentBook, other._isFragmentBook))
            {
                return false;
            }

            if (!object.Equals(_selfService, other._selfService))
            {
                return false;
            }

            if (!object.Equals(_selfServiceMyRequest, other._selfServiceMyRequest))
            {
                return false;
            }

            if (!object.Equals(_selfServiceQueueSize, other._selfServiceQueueSize))
            {
                return false;
            }

            if (!object.Equals(_selfServiceBusy, other._selfServiceBusy))
            {
                return false;
            }

            if (!object.Equals(_selfServiceBooksCount, other._selfServiceBooksCount))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            hashCode = hashCode * 37 + _id.GetHashCode();

            hashCode = hashCode * 37 + _isMyBook.GetHashCode();

            hashCode = hashCode * 37 + _isLocal.GetHashCode();

            hashCode = hashCode * 37 + _isInPurchase.GetHashCode();

            hashCode = hashCode * 37 + _isEmptyElement.GetHashCode();

            hashCode = hashCode * 37 + _readedPercent.GetHashCode();

            if (_inappName != null)
            {
                hashCode = hashCode * 37 + _inappName.GetHashCode();
            }

            hashCode = hashCode * 37 + _inappPrice.GetHashCode();

            if (_added != null)
            {
                hashCode = hashCode * 37 + _added.GetHashCode();
            }

            if (_updatedTime != null)
            {
                hashCode = hashCode * 37 + _updatedTime.GetHashCode();
            }

            hashCode = hashCode * 37 + _basePrice.GetHashCode();

            hashCode = hashCode * 37 + _price.GetHashCode();

            if (_chars != null)
            {
                hashCode = hashCode * 37 + _chars.GetHashCode();
            }

            hashCode = hashCode * 37 + _bookmarksCount.GetHashCode();

            if (_images != null)
            {
                hashCode = hashCode * 37 + _images.GetHashCode();
            }

            if (_zipSize != null)
            {
                hashCode = hashCode * 37 + _zipSize.GetHashCode();
            }

            if (_hasTrial != null)
            {
                hashCode = hashCode * 37 + _hasTrial.GetHashCode();
            }

            if (_cover != null)
            {
                hashCode = hashCode * 37 + _cover.GetHashCode();
            }

            if (_coverPreview != null)
            {
                hashCode = hashCode * 37 + _coverPreview.GetHashCode();
            }

            if (_url != null)
            {
                hashCode = hashCode * 37 + _url.GetHashCode();
            }

            if (_rating != null)
            {
                hashCode = hashCode * 37 + _rating.GetHashCode();
            }

            if (_recenses != null)
            {
                hashCode = hashCode * 37 + _recenses.GetHashCode();
            }

            if (_type != null)
            {
                hashCode = hashCode * 37 + _type.GetHashCode();
            }

            if (_drm != null)
            {
                hashCode = hashCode * 37 + _drm.GetHashCode();
            }

            if (_copyright != null)
            {
                hashCode = hashCode * 37 + _copyright.GetHashCode();
            }

            if (_trialId != null)
            {
                hashCode = hashCode * 37 + _trialId.GetHashCode();
            }

            if (_basket != null)
            {
                hashCode = hashCode * 37 + _basket.GetHashCode();
            }

            if (_inGifts != null)
            {
                hashCode = hashCode * 37 + _inGifts.GetHashCode();
            }

            if (_itemsLeft != null)
            {
                hashCode = hashCode * 37 + _itemsLeft.GetHashCode();
            }

            if (_files != null)
            {
                hashCode = hashCode * 37 + _files.GetHashCode();
            }

            if (_tags != null)
            {
                hashCode = hashCode * 37 + _tags.GetHashCode();
            }

            if (_description != null)
            {
                hashCode = hashCode * 37 + _description.GetHashCode();
            }

            if (_expiredDate != null)
            {
                hashCode = hashCode * 37 + _expiredDate.GetHashCode();
            }

            if (_selfService != null)
            {
                hashCode = hashCode * 37 + _selfService.GetHashCode();
            }

            if (_selfServiceMyRequest != null)
            {
                hashCode = hashCode * 37 + _selfServiceMyRequest.GetHashCode();
            }

            if (_selfServiceQueueSize != null)
            {
                hashCode = hashCode * 37 + _selfServiceQueueSize.GetHashCode();
            }

            if (_selfServiceBusy != null)
            {
                hashCode = hashCode * 37 + _selfServiceBusy.GetHashCode();
            }

            if (_selfServiceBooksCount != null)
            {
                hashCode = hashCode * 37 + _selfServiceBooksCount.GetHashCode();
            }

            hashCode = hashCode * 37 + _isLibraryAccountBook.GetHashCode();

            hashCode = hashCode * 37 + _isExpiredBook.GetHashCode();
            hashCode = hashCode * 37 + _isHiddenBook.GetHashCode();
            hashCode = hashCode * 37 + _isFragmentBook.GetHashCode();

            return hashCode;
        }
        #endregion

        #region public class TextDescription
        [XmlRoot]
        public partial class TextDescription : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private Hidden _hidden;
            #endregion

            #region Properties
            [XmlElement("hidden")]
            public Hidden Hidden
            {
                get { return _hidden; }
                set
                {
                    if (!object.Equals(_hidden, value))
                    {
                        OnPropertyChangingOld("Hidden", _hidden, value);
                        _hidden = value;
                        OnPropertyChanged("Hidden");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (TextDescription)source;

                BeforeProcessCopy(other, cloning, deepCloning);


                if (cloning)
                {
                    _hidden = other._hidden == null ? null : (Hidden)other._hidden.Clone(deepCloning);
                }
                else
                {
                    if (_hidden != null)
                    {
                        if (other._hidden != null)
                        {
                            _hidden.Update(other._hidden);
                        }
                        else
                        {
                            _hidden = null;
                        }
                    }
                    else
                    {
                        if (other._hidden != null)
                        {
                            _hidden = (Hidden)other._hidden.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(TextDescription source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(TextDescription source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as TextDescription;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_hidden, other._hidden))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_hidden != null)
                {
                    hashCode = hashCode * 37 + _hidden.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class Hidden
        [XmlRoot]
        public partial class Hidden : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private TitleInfo _titleInfo;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private PublishInfo _publishInfo;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private DocumentInfo _documentInfo;
            #endregion

            #region Properties
            [XmlElement("title-info")]
            public TitleInfo TitleInfo
            {
                get { return _titleInfo; }
                set
                {
                    if (!object.Equals(_titleInfo, value))
                    {
                        OnPropertyChangingOld("TitleInfo", _titleInfo, value);
                        _titleInfo = value;
                        OnPropertyChanged("TitleInfo");
                    }
                }
            }
            [XmlElement("publish-info")]
            public PublishInfo PublishInfo
            {
                get { return _publishInfo; }
                set
                {
                    if (!object.Equals(_publishInfo, value))
                    {
                        OnPropertyChangingOld("PublishInfo", _publishInfo, value);
                        _publishInfo = value;
                        OnPropertyChanged("PublishInfo");
                    }
                }
            }
            [XmlElement("document-info")]
            public DocumentInfo DocumentInfo
            {
                get { return _documentInfo; }
                set
                {
                    if (!object.Equals(_documentInfo, value))
                    {
                        OnPropertyChangingOld("DocumentInfo", _documentInfo, value);
                        _documentInfo = value;
                        OnPropertyChanged("DocumentInfo");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Hidden)source;

                BeforeProcessCopy(other, cloning, deepCloning);


                if (cloning)
                {
                    _titleInfo = other._titleInfo == null ? null : (TitleInfo)other._titleInfo.Clone(deepCloning);
                    _publishInfo = other._publishInfo == null ? null : (PublishInfo)other._publishInfo.Clone(deepCloning);
                    _documentInfo = other._documentInfo == null ? null : (DocumentInfo)other._documentInfo.Clone(deepCloning);
                }
                else
                {
                    if (_titleInfo != null)
                    {
                        if (other._titleInfo != null)
                        {
                            _titleInfo.Update(other._titleInfo);
                        }
                        else
                        {
                            _titleInfo = null;
                        }
                    }
                    else
                    {
                        if (other._titleInfo != null)
                        {
                            _titleInfo = (TitleInfo)other._titleInfo.Clone(false);
                        }
                    }
                    if (_publishInfo != null)
                    {
                        if (other._publishInfo != null)
                        {
                            _publishInfo.Update(other._publishInfo);
                        }
                        else
                        {
                            _publishInfo = null;
                        }
                    }
                    else
                    {
                        if (other._publishInfo != null)
                        {
                            _publishInfo = (PublishInfo)other._publishInfo.Clone(false);
                        }
                    }
                    if (_documentInfo != null)
                    {
                        if (other._documentInfo != null)
                        {
                            _documentInfo.Update(other._documentInfo);
                        }
                        else
                        {
                            _documentInfo = null;
                        }
                    }
                    else
                    {
                        if (other._documentInfo != null)
                        {
                            _documentInfo = (DocumentInfo)other._documentInfo.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Hidden source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Hidden source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Hidden;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_titleInfo, other._titleInfo))
                {
                    return false;
                }

                if (!object.Equals(_publishInfo, other._publishInfo))
                {
                    return false;
                }

                if (!object.Equals(_documentInfo, other._documentInfo))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_titleInfo != null)
                {
                    hashCode = hashCode * 37 + _titleInfo.GetHashCode();
                }

                if (_publishInfo != null)
                {
                    hashCode = hashCode * 37 + _publishInfo.GetHashCode();
                }

                if (_documentInfo != null)
                {
                    hashCode = hashCode * 37 + _documentInfo.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class TitleInfo
        [XmlRoot]
        public partial class TitleInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _bookTitle;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private Annotation _annotation;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _year;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _language;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _sourceLanguage;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private AuthorInfo[] _author;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private SequenceInfo _sequence;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private CoverpageInfo _coverpage;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string[] _genres;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<AuthorInfo> _translators;
            #endregion

            #region Properties
            [XmlElement("book-title")]
            public string BookTitle
            {
                get { return _bookTitle; }
                set
                {
                    if (!object.Equals(_bookTitle, value))
                    {
                        OnPropertyChangingOld("BookTitle", _bookTitle, value);
                        _bookTitle = value;
                        OnPropertyChanged("BookTitle");
                    }
                }
            }
            [XmlElement("annotation")]
            public Annotation Annotation
            {
                get { return _annotation; }
                set
                {
                    if (!object.Equals(_annotation, value))
                    {
                        OnPropertyChangingOld("Annotation", _annotation, value);
                        _annotation = value;
                        OnPropertyChanged("Annotation");
                    }
                }
            }
            [XmlElement("date")]
            public string Year
            {
                get { return _year; }
                set
                {
                    if (!object.Equals(_year, value))
                    {
                        OnPropertyChangingOld("Year", _year, value);
                        _year = value;
                        OnPropertyChanged("Year");
                    }
                }
            }
            [XmlElement("lang")]
            public string Language
            {
                get { return _language; }
                set
                {
                    if (!object.Equals(_language, value))
                    {
                        OnPropertyChangingOld("Language", _language, value);
                        _language = value;
                        OnPropertyChanged("Language");
                    }
                }
            }
            [XmlElement("src-lang")]
            public string SourceLanguage
            {
                get { return _sourceLanguage; }
                set
                {
                    if (!object.Equals(_sourceLanguage, value))
                    {
                        OnPropertyChangingOld("SourceLanguage", _sourceLanguage, value);
                        _sourceLanguage = value;
                        OnPropertyChanged("SourceLanguage");
                    }
                }
            }
            [XmlElement("author")]
            public AuthorInfo[] Author
            {
                get { return _author; }
                set
                {
                    if (!object.Equals(_author, value))
                    {
                        OnPropertyChangingOld("Author", _author, value);
                        _author = value;
                        OnPropertyChanged("Author");
                    }
                }
            }
            [XmlElement("sequence")]
            public SequenceInfo Sequence
            {
                get { return _sequence; }
                set
                {
                    if (!object.Equals(_sequence, value))
                    {
                        OnPropertyChangingOld("Sequence", _sequence, value);
                        _sequence = value;
                        OnPropertyChanged("Sequence");
                    }
                }
            }
            [XmlElement("coverpage")]
            public CoverpageInfo Coverpage
            {
                get { return _coverpage; }
                set
                {
                    if (!object.Equals(_coverpage, value))
                    {
                        OnPropertyChangingOld("Coverpage", _coverpage, value);
                        _coverpage = value;
                        OnPropertyChanged("Coverpage");
                    }
                }
            }
            [XmlElement("genre")]
            public string[] Genres
            {
                get { return _genres; }
                set
                {
                    if (!object.Equals(_genres, value))
                    {
                        OnPropertyChangingOld("Genres", _genres, value);
                        _genres = value;
                        OnPropertyChanged("Genres");
                    }
                }
            }
            [XmlElement("translator")]
            public XCollection<AuthorInfo> Translators
            {
                get { return _translators; }
                set
                {
                    if (!object.Equals(_translators, value))
                    {
                        OnPropertyChangingOld("Translators", _translators, value);
                        _translators = value;
                        OnPropertyChanged("Translators");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (TitleInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _bookTitle = other._bookTitle;
                _year = other._year;
                _language = other._language;
                _sourceLanguage = other._sourceLanguage;
                _author = other._author;
                _genres = other._genres;

                if (cloning)
                {
                    _annotation = other._annotation == null ? null : (Annotation)other._annotation.Clone(deepCloning);
                    _sequence = other._sequence == null ? null : (SequenceInfo)other._sequence.Clone(deepCloning);
                    _coverpage = other._coverpage == null ? null : (CoverpageInfo)other._coverpage.Clone(deepCloning);
                    _translators = other._translators == null ? null : (XCollection<AuthorInfo>)other._translators.Clone(deepCloning);
                }
                else
                {
                    if (_annotation != null)
                    {
                        if (other._annotation != null)
                        {
                            _annotation.Update(other._annotation);
                        }
                        else
                        {
                            _annotation = null;
                        }
                    }
                    else
                    {
                        if (other._annotation != null)
                        {
                            _annotation = (Annotation)other._annotation.Clone(false);
                        }
                    }
                    if (_sequence != null)
                    {
                        if (other._sequence != null)
                        {
                            _sequence.Update(other._sequence);
                        }
                        else
                        {
                            _sequence = null;
                        }
                    }
                    else
                    {
                        if (other._sequence != null)
                        {
                            _sequence = (SequenceInfo)other._sequence.Clone(false);
                        }
                    }
                    if (_coverpage != null)
                    {
                        if (other._coverpage != null)
                        {
                            _coverpage.Update(other._coverpage);
                        }
                        else
                        {
                            _coverpage = null;
                        }
                    }
                    else
                    {
                        if (other._coverpage != null)
                        {
                            _coverpage = (CoverpageInfo)other._coverpage.Clone(false);
                        }
                    }
                    if (_translators != null)
                    {
                        if (other._translators != null)
                        {
                            _translators.Update(other._translators);
                        }
                        else
                        {
                            _translators = null;
                        }
                    }
                    else
                    {
                        if (other._translators != null)
                        {
                            _translators = (XCollection<AuthorInfo>)other._translators.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(TitleInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(TitleInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as TitleInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_bookTitle, other._bookTitle))
                {
                    return false;
                }

                if (!object.Equals(_annotation, other._annotation))
                {
                    return false;
                }

                if (!object.Equals(_year, other._year))
                {
                    return false;
                }

                if (!object.Equals(_language, other._language))
                {
                    return false;
                }

                if (!object.Equals(_sourceLanguage, other._sourceLanguage))
                {
                    return false;
                }

                if (_author != null)
                {
                    for (int i = 0; i < _author.Length; ++i)
                        if (!_author[i].Equals(other._author[i])) return false;
                }
                if (!object.Equals(_sequence, other._sequence))
                {
                    return false;
                }

                if (!object.Equals(_coverpage, other._coverpage))
                {
                    return false;
                }

                for (int i = 0; i < _genres.Length; ++i)
                    if (!_genres[i].Equals(other._genres[i])) return false;

                if (!object.Equals(_translators, other._translators))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_bookTitle != null)
                {
                    hashCode = hashCode * 37 + _bookTitle.GetHashCode();
                }

                if (_annotation != null)
                {
                    hashCode = hashCode * 37 + _annotation.GetHashCode();
                }

                if (_year != null)
                {
                    hashCode = hashCode * 37 + _year.GetHashCode();
                }

                if (_language != null)
                {
                    hashCode = hashCode * 37 + _language.GetHashCode();
                }

                if (_sourceLanguage != null)
                {
                    hashCode = hashCode * 37 + _sourceLanguage.GetHashCode();
                }

                if (_author != null)
                {
                    hashCode = hashCode * 37 + _author.GetHashCode();
                }

                if (_sequence != null)
                {
                    hashCode = hashCode * 37 + _sequence.GetHashCode();
                }

                if (_coverpage != null)
                {
                    hashCode = hashCode * 37 + _coverpage.GetHashCode();
                }

                if (_genres != null)
                {
                    hashCode = hashCode * 37 + _genres.GetHashCode();
                }

                if (_translators != null)
                {
                    hashCode = hashCode * 37 + _translators.GetHashCode();
                }

                return hashCode;
            }
            #endregion

            #region public class AuthorInfo
            [XmlRoot]
            public partial class AuthorInfo : XObject
            {
                #region Fields
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private string _id;
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private string _firstName;
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private string _middleName;
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private string _lastName;
                #endregion

                #region Properties
                [XmlElement("id")]
                public string Id
                {
                    get { return _id; }
                    set
                    {
                        if (!object.Equals(_id, value))
                        {
                            OnPropertyChangingOld("Id", _id, value);
                            _id = value;
                            OnPropertyChanged("Id");
                        }
                    }
                }
                [XmlElement("first-name")]
                public string FirstName
                {
                    get { return _firstName; }
                    set
                    {
                        if (!object.Equals(_firstName, value))
                        {
                            OnPropertyChangingOld("FirstName", _firstName, value);
                            _firstName = value;
                            OnPropertyChanged("FirstName");
                        }
                    }
                }
                [XmlElement("middle-name")]
                public string MiddleName
                {
                    get { return _middleName; }
                    set
                    {
                        if (!object.Equals(_middleName, value))
                        {
                            OnPropertyChangingOld("MiddleName", _middleName, value);
                            _middleName = value;
                            OnPropertyChanged("MiddleName");
                        }
                    }
                }
                [XmlElement("last-name")]
                public string LastName
                {
                    get { return _lastName; }
                    set
                    {
                        if (!object.Equals(_lastName, value))
                        {
                            OnPropertyChangingOld("LastName", _lastName, value);
                            _lastName = value;
                            OnPropertyChanged("LastName");
                        }
                    }
                }
                #endregion

                #region ProcessCopy
                protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
                {
                    base.ProcessCopy(source, cloning, deepCloning);

                    var other = (AuthorInfo)source;

                    BeforeProcessCopy(other, cloning, deepCloning);

                    _id = other._id;
                    _firstName = other._firstName;
                    _middleName = other._middleName;
                    _lastName = other._lastName;

                    AfterProcessCopy(other, cloning, deepCloning);
                }

                partial void BeforeProcessCopy(AuthorInfo source, bool cloning, bool deepCloning);
                partial void AfterProcessCopy(AuthorInfo source, bool cloning, bool deepCloning);
                #endregion
                #region CreateKey
                protected override XKey CreateKey()
                {
                    XKey key = base.CreateKey();

                    key = key.WithKey("Id", _id);

                    return key;
                }
                #endregion
                #region Equals/GetHashCode
                public override bool Equals(object otherObject)
                {
                    var other = otherObject as AuthorInfo;

                    if (other == null)
                    {
                        return false;
                    }

                    if (!object.Equals(_id, other._id))
                    {
                        return false;
                    }

                    if (!object.Equals(_firstName, other._firstName))
                    {
                        return false;
                    }

                    if (!object.Equals(_middleName, other._middleName))
                    {
                        return false;
                    }

                    if (!object.Equals(_lastName, other._lastName))
                    {
                        return false;
                    }

                    return true;
                }

                public override int GetHashCode()
                {
                    int hashCode = 17;

                    if (_id != null)
                    {
                        hashCode = hashCode * 37 + _id.GetHashCode();
                    }

                    if (_firstName != null)
                    {
                        hashCode = hashCode * 37 + _firstName.GetHashCode();
                    }

                    if (_middleName != null)
                    {
                        hashCode = hashCode * 37 + _middleName.GetHashCode();
                    }

                    if (_lastName != null)
                    {
                        hashCode = hashCode * 37 + _lastName.GetHashCode();
                    }

                    return hashCode;
                }
                #endregion

            }
            #endregion
            #region public class CoverpageInfo
            [XmlRoot]
            public partial class CoverpageInfo : XObject
            {
                #region Fields
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private ImageInfo _image;
                #endregion

                #region Properties
                [XmlElement("image")]
                public ImageInfo Image
                {
                    get { return _image; }
                    set
                    {
                        if (!object.Equals(_image, value))
                        {
                            OnPropertyChangingOld("Image", _image, value);
                            _image = value;
                            OnPropertyChanged("Image");
                        }
                    }
                }
                #endregion

                #region ProcessCopy
                protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
                {
                    base.ProcessCopy(source, cloning, deepCloning);

                    var other = (CoverpageInfo)source;

                    BeforeProcessCopy(other, cloning, deepCloning);


                    if (cloning)
                    {
                        _image = other._image == null ? null : (ImageInfo)other._image.Clone(deepCloning);
                    }
                    else
                    {
                        if (_image != null)
                        {
                            if (other._image != null)
                            {
                                _image.Update(other._image);
                            }
                            else
                            {
                                _image = null;
                            }
                        }
                        else
                        {
                            if (other._image != null)
                            {
                                _image = (ImageInfo)other._image.Clone(false);
                            }
                        }
                    }

                    AfterProcessCopy(other, cloning, deepCloning);
                }

                partial void BeforeProcessCopy(CoverpageInfo source, bool cloning, bool deepCloning);
                partial void AfterProcessCopy(CoverpageInfo source, bool cloning, bool deepCloning);
                #endregion
                #region Equals/GetHashCode
                public override bool Equals(object otherObject)
                {
                    var other = otherObject as CoverpageInfo;

                    if (other == null)
                    {
                        return false;
                    }

                    if (!object.Equals(_image, other._image))
                    {
                        return false;
                    }

                    return true;
                }

                public override int GetHashCode()
                {
                    int hashCode = 17;

                    if (_image != null)
                    {
                        hashCode = hashCode * 37 + _image.GetHashCode();
                    }

                    return hashCode;
                }
                #endregion

                #region public class ImageInfo
                [XmlRoot]
                public partial class ImageInfo : XObject
                {
                    #region Fields
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private string _href;
                    #endregion

                    #region Properties
                    [XmlAttribute("href")]
                    public string Href
                    {
                        get { return _href; }
                        set
                        {
                            if (!object.Equals(_href, value))
                            {
                                OnPropertyChangingOld("Href", _href, value);
                                _href = value;
                                OnPropertyChanged("Href");
                            }
                        }
                    }
                    #endregion

                    #region ProcessCopy
                    protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
                    {
                        base.ProcessCopy(source, cloning, deepCloning);

                        var other = (ImageInfo)source;

                        BeforeProcessCopy(other, cloning, deepCloning);

                        _href = other._href;

                        AfterProcessCopy(other, cloning, deepCloning);
                    }

                    partial void BeforeProcessCopy(ImageInfo source, bool cloning, bool deepCloning);
                    partial void AfterProcessCopy(ImageInfo source, bool cloning, bool deepCloning);
                    #endregion
                    #region Equals/GetHashCode
                    public override bool Equals(object otherObject)
                    {
                        var other = otherObject as ImageInfo;

                        if (other == null)
                        {
                            return false;
                        }

                        if (!object.Equals(_href, other._href))
                        {
                            return false;
                        }

                        return true;
                    }

                    public override int GetHashCode()
                    {
                        int hashCode = 17;

                        if (_href != null)
                        {
                            hashCode = hashCode * 37 + _href.GetHashCode();
                        }

                        return hashCode;
                    }
                    #endregion

                }
                #endregion
            }
            #endregion
        }
        #endregion
        #region public class Annotation
        [XmlRoot]
        public partial class Annotation : XObject, IXmlSerializable
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _text;
            #endregion

            #region Properties
            public string Text
            {
                get { return _text; }
                set
                {
                    if (!object.Equals(_text, value))
                    {
                        OnPropertyChangingOld("Text", _text, value);
                        _text = value;
                        OnPropertyChanged("Text");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Annotation)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _text = other._text;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Annotation source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Annotation source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Annotation;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_text, other._text))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_text != null)
                {
                    hashCode = hashCode * 37 + _text.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class PublishInfo
        [XmlRoot]
        public partial class PublishInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _bookName;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _publisher;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _city;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _year;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _isbn;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private SequenceInfo _sequence;
            #endregion

            #region Properties
            [XmlElement("book-name")]
            public string BookName
            {
                get { return _bookName; }
                set
                {
                    if (!object.Equals(_bookName, value))
                    {
                        OnPropertyChangingOld("BookName", _bookName, value);
                        _bookName = value;
                        OnPropertyChanged("BookName");
                    }
                }
            }
            [XmlElement("publisher")]
            public string Publisher
            {
                get { return _publisher; }
                set
                {
                    if (!object.Equals(_publisher, value))
                    {
                        OnPropertyChangingOld("Publisher", _publisher, value);
                        _publisher = value;
                        OnPropertyChanged("Publisher");
                    }
                }
            }
            [XmlElement("city")]
            public string City
            {
                get { return _city; }
                set
                {
                    if (!object.Equals(_city, value))
                    {
                        OnPropertyChangingOld("City", _city, value);
                        _city = value;
                        OnPropertyChanged("City");
                    }
                }
            }
            [XmlElement("year")]
            public int Year
            {
                get { return _year; }
                set
                {
                    if (!object.Equals(_year, value))
                    {
                        OnPropertyChangingOld("Year", _year, value);
                        _year = value;
                        OnPropertyChanged("Year");
                    }
                }
            }
            [XmlElement("isbn")]
            public string Isbn
            {
                get { return _isbn; }
                set
                {
                    if (!object.Equals(_isbn, value))
                    {
                        OnPropertyChangingOld("Isbn", _isbn, value);
                        _isbn = value;
                        OnPropertyChanged("Isbn");
                    }
                }
            }
            [XmlElement("sequence")]
            public SequenceInfo Sequence
            {
                get { return _sequence; }
                set
                {
                    if (!object.Equals(_sequence, value))
                    {
                        OnPropertyChangingOld("Sequence", _sequence, value);
                        _sequence = value;
                        OnPropertyChanged("Sequence");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (PublishInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _bookName = other._bookName;
                _publisher = other._publisher;
                _city = other._city;
                _year = other._year;
                _isbn = other._isbn;

                if (cloning)
                {
                    _sequence = other._sequence == null ? null : (SequenceInfo)other._sequence.Clone(deepCloning);
                }
                else
                {
                    if (_sequence != null)
                    {
                        if (other._sequence != null)
                        {
                            _sequence.Update(other._sequence);
                        }
                        else
                        {
                            _sequence = null;
                        }
                    }
                    else
                    {
                        if (other._sequence != null)
                        {
                            _sequence = (SequenceInfo)other._sequence.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(PublishInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(PublishInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as PublishInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_bookName, other._bookName))
                {
                    return false;
                }

                if (!object.Equals(_publisher, other._publisher))
                {
                    return false;
                }

                if (!object.Equals(_city, other._city))
                {
                    return false;
                }

                if (!object.Equals(_year, other._year))
                {
                    return false;
                }

                if (!object.Equals(_isbn, other._isbn))
                {
                    return false;
                }

                if (!object.Equals(_sequence, other._sequence))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_bookName != null)
                {
                    hashCode = hashCode * 37 + _bookName.GetHashCode();
                }

                if (_publisher != null)
                {
                    hashCode = hashCode * 37 + _publisher.GetHashCode();
                }

                if (_city != null)
                {
                    hashCode = hashCode * 37 + _city.GetHashCode();
                }

                hashCode = hashCode * 37 + _year.GetHashCode();

                if (_isbn != null)
                {
                    hashCode = hashCode * 37 + _isbn.GetHashCode();
                }

                if (_sequence != null)
                {
                    hashCode = hashCode * 37 + _sequence.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class DocumentInfo
        [XmlRoot]
        public partial class DocumentInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _id;
            #endregion

            #region Properties
            [XmlElement("id")]
            public string Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (DocumentInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _id = other._id;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(DocumentInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(DocumentInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as DocumentInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_id != null)
                {
                    hashCode = hashCode * 37 + _id.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class SequenceInfo
        [XmlRoot]
        public partial class SequenceInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _id;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _number;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _name;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _imgUrl;
            #endregion

            #region Properties
            [XmlAttribute("id")]
            public int Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            [XmlAttribute("number")]
            public int Number
            {
                get { return _number; }
                set
                {
                    if (!object.Equals(_number, value))
                    {
                        OnPropertyChangingOld("Number", _number, value);
                        _number = value;
                        OnPropertyChanged("Number");
                    }
                }
            }
            [XmlAttribute("name")]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (!object.Equals(_name, value))
                    {
                        OnPropertyChangingOld("Name", _name, value);
                        _name = value;
                        OnPropertyChanged("Name");
                    }
                }
            }

            public string ImgUrl
            {
                get { return _imgUrl; }
                set
                {
                    if (!object.Equals(_imgUrl, value))
                    {
                        OnPropertyChangingOld("ImgUrl", _imgUrl, value);
                        _imgUrl = value;
                        OnPropertyChanged("ImgUrl");
                    }
                }
            }

            #endregion

            #region Methods
            public override string ToString()
            {
                return _name;
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (SequenceInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _id = other._id;
                _number = other._number;
                _name = other._name;
                _imgUrl = other._imgUrl;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(SequenceInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(SequenceInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as SequenceInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                if (!object.Equals(_number, other._number))
                {
                    return false;
                }

                if (!object.Equals(_name, other._name))
                {
                    return false;
                }

                if (!object.Equals(_imgUrl, other._imgUrl))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                hashCode = hashCode * 37 + _id.GetHashCode();
                hashCode = hashCode * 37 + _number.GetHashCode();

                if (_name != null)
                {
                    hashCode = hashCode * 37 + _name.GetHashCode();
                }

                if (_imgUrl != null)
                {
                    hashCode = hashCode * 37 + _imgUrl.GetHashCode();
                }
                return hashCode;
            }
            #endregion

        }

        public class CollectionsInfo: XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _id;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _number;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _name;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _imgUrl;
            #endregion

            #region Properties
            [XmlAttribute("id")]
            public int Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            [XmlAttribute("number")]
            public int Number
            {
                get { return _number; }
                set
                {
                    if (!object.Equals(_number, value))
                    {
                        OnPropertyChangingOld("Number", _number, value);
                        _number = value;
                        OnPropertyChanged("Number");
                    }
                }
            }
            [XmlAttribute("name")]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (!object.Equals(_name, value))
                    {
                        OnPropertyChangingOld("Name", _name, value);
                        _name = value;
                        OnPropertyChanged("Name");
                    }
                }
            }

            public string ImgUrl
            {
                get { return _imgUrl; }
                set
                {
                    if (!object.Equals(_imgUrl, value))
                    {
                        OnPropertyChangingOld("ImgUrl", _imgUrl, value);
                        _imgUrl = value;
                        OnPropertyChanged("ImgUrl");
                    }
                }
            }

            #endregion

            #region Methods
            public override string ToString()
            {
                return _name;
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (CollectionsInfo)source;

                _id = other._id;
                _number = other._number;
                _name = other._name;
                _imgUrl = other._imgUrl;

            }

            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as CollectionsInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                if (!object.Equals(_number, other._number))
                {
                    return false;
                }

                if (!object.Equals(_name, other._name))
                {
                    return false;
                }

                if (!object.Equals(_imgUrl, other._imgUrl))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                hashCode = hashCode * 37 + _id.GetHashCode();
                hashCode = hashCode * 37 + _number.GetHashCode();

                if (_name != null)
                {
                    hashCode = hashCode * 37 + _name.GetHashCode();
                }

                if (_imgUrl != null)
                {
                    hashCode = hashCode * 37 + _imgUrl.GetHashCode();
                }
                return hashCode;
            }
            #endregion

        }

        #endregion
        #region public class TagsInfo
        [XmlRoot]
        public partial class TagsInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<Tag> _tags;
            #endregion

            #region Properties
            [XmlElement("tag")]
            public XCollection<Tag> Tags
            {
                get { return _tags; }
                set
                {
                    if (!object.Equals(_tags, value))
                    {
                        OnPropertyChangingOld("Tags", _tags, value);
                        _tags = value;
                        OnPropertyChanged("Tags");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (TagsInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);


                if (cloning)
                {
                    _tags = other._tags == null ? null : (XCollection<Tag>)other._tags.Clone(deepCloning);
                }
                else
                {
                    if (_tags != null)
                    {
                        if (other._tags != null)
                        {
                            _tags.Update(other._tags);
                        }
                        else
                        {
                            _tags = null;
                        }
                    }
                    else
                    {
                        if (other._tags != null)
                        {
                            _tags = (XCollection<Tag>)other._tags.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(TagsInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(TagsInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as TagsInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_tags, other._tags))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_tags != null)
                {
                    hashCode = hashCode * 37 + _tags.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class Tag
        [XmlRoot]
        public partial class Tag : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _id;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _title;
            #endregion

            #region Properties
            [XmlAttribute("id")]
            public int Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            [XmlAttribute("tag_title")]
            public string Title
            {
                get { return _title; }
                set
                {
                    if (!object.Equals(_title, value))
                    {
                        OnPropertyChangingOld("Title", _title, value);
                        _title = value;
                        OnPropertyChanged("Title");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Tag)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _id = other._id;
                _title = other._title;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Tag source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Tag source, bool cloning, bool deepCloning);
            #endregion
            #region CreateKey
            protected override XKey CreateKey()
            {
                XKey key = base.CreateKey();

                key = key.WithKey("Id", _id);

                return key;
            }
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Tag;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                if (!object.Equals(_title, other._title))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                hashCode = hashCode * 37 + _id.GetHashCode();

                if (_title != null)
                {
                    hashCode = hashCode * 37 + _title.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class FilesInfo
        [XmlRoot]
        public partial class FilesInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<File> _files;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<Group> _groups;
            #endregion

            #region Properties
            [XmlElement("file")]
            public XCollection<File> Files
            {
                get { return _files; }
                set
                {
                    if (!object.Equals(_files, value))
                    {
                        OnPropertyChangingOld("Files", _files, value);
                        _files = value;
                        OnPropertyChanged("Files");
                    }
                }
            }

            [XmlElement("group")]
            public XCollection<Group> Groups
            {
                get { return _groups; }
                set
                {
                    if (!object.Equals(_groups, value))
                    {
                        OnPropertyChangingOld("Groups", _groups, value);
                        _groups = value;
                        OnPropertyChanged("Groups");
                    }
                }
            }

            public File FullPdfFile
            {
                get
                {
                    return GetFileByGroupType(BookGroup.PdfFullGroup);
                }
            }

            public File FragmentPdfFile
            {
                get
                {
                    return GetFileByGroupType(BookGroup.PdfFragmentGroup);
                }
            }

            private File GetFileByGroupType(BookGroup groupType)
            {
                if (_groups != null)
                {
                    foreach (var group in _groups)
                    {
                        if (group.GroupId == (int)groupType)
                        {
                            if (group.Files.Count > 0)
                            {
                                return group.Files[0];
                            }
                        }
                    }
                }
                return null;
            }

            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (FilesInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);


                if (cloning)
                {
                    _files = other._files == null ? null : (XCollection<File>)other._files.Clone(deepCloning);
                    _groups = other._groups == null ? null : (XCollection<Group>)other._groups.Clone(deepCloning);
                }
                else
                {
                    if (_files != null)
                    {
                        if (other._files != null)
                        {
                            _files.Update(other._files);
                        }
                        else
                        {
                            _files = null;
                        }
                    }
                    else
                    {
                        if (other._files != null)
                        {
                            _files = (XCollection<File>)other._files.Clone(false);
                        }
                    }

                    if (_groups != null)
                    {
                        if (other._groups != null)
                        {
                            _groups.Update(other._groups);
                        }
                        else
                        {
                            _groups = null;
                        }
                    }
                    else
                    {
                        if (other._groups != null)
                        {
                            _groups = (XCollection<Group>)other._groups.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(FilesInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(FilesInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as FilesInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_files, other._files))
                {
                    return false;
                }

                if (!object.Equals(_groups, other._groups))
                {
                    return false;
                }
                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_files != null)
                {
                    hashCode = hashCode * 37 + _files.GetHashCode();
                }

                if (_groups != null)
                {
                    hashCode = hashCode * 37 + _groups.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion


        #region public class Group
        [XmlRoot("group")]
        public partial class Group : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _title;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _groupId;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<File> _files;
            #endregion

            #region Properties
            [XmlAttribute("value")]
            public string Title
            {
                get { return _title; }
                set
                {
                    if (!object.Equals(_title, value))
                    {
                        OnPropertyChangingOld("Title", _title, value);
                        _title = value;
                        OnPropertyChanged("Title");
                    }
                }
            }
            [XmlAttribute("group_id")]
            public int GroupId
            {
                get { return _groupId; }
                set
                {
                    if (!object.Equals(_groupId, value))
                    {
                        OnPropertyChangingOld("GroupId", _groupId, value);
                        _groupId = value;
                        OnPropertyChanged("GroupId");
                    }
                }
            }
            [XmlElement("file")]
            public XCollection<File> Files
            {
                get { return _files; }
                set
                {
                    if (!object.Equals(_files, value))
                    {
                        OnPropertyChangingOld("Files", _files, value);
                        _files = value;
                        OnPropertyChanged("Files");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Group)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _title = other._title;
                _groupId = other._groupId;
                if (cloning)
                {
                    _files = other._files == null ? null : (XCollection<File>)other._files.Clone(deepCloning);
                }
                else
                {
                    if (_files != null)
                    {
                        if (other._files != null)
                        {
                            _files.Update(other._files);
                        }
                        else
                        {
                            _files = null;
                        }
                    }
                    else
                    {
                        if (other._files != null)
                        {
                            _files = (XCollection<File>)other._files.Clone(false);
                        }
                    }
                }
                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Group source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Group source, bool cloning, bool deepCloning);
            #endregion
            #region CreateKey
            protected override XKey CreateKey()
            {
                XKey key = base.CreateKey();

                key = key.WithKey("GroupId", _groupId);

                return key;
            }
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Group;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_title, other._title))
                {
                    return false;
                }

                if (!object.Equals(_groupId, other._groupId))
                {
                    return false;
                }

                if (!object.Equals(_files, other._files))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_title != null)
                {
                    hashCode = hashCode * 37 + _title.GetHashCode();
                }

                if (_files != null)
                {
                    hashCode = hashCode * 37 + _files.GetHashCode();
                }

                hashCode = hashCode * 37 + _groupId.GetHashCode();

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class File
        [XmlRoot]
        public partial class File : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _id;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _filename;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _type;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _size;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private int _seconds;
            #endregion

            #region Properties
            [XmlAttribute("id")]
            public int Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            [XmlAttribute("filename")]
            public string Filename
            {
                get { return _filename; }
                set
                {
                    if (!object.Equals(_filename, value))
                    {
                        OnPropertyChangingOld("Filename", _filename, value);
                        _filename = value;
                        OnPropertyChanged("Filename");
                    }
                }
            }
            [XmlAttribute("type")]
            public string Type
            {
                get { return _type; }
                set
                {
                    if (!object.Equals(_type, value))
                    {
                        OnPropertyChangingOld("Type", _type, value);
                        _type = value;
                        OnPropertyChanged("Type");
                    }
                }
            }
            [XmlAttribute("size")]
            public int Size
            {
                get { return _size; }
                set
                {
                    if (!object.Equals(_size, value))
                    {
                        OnPropertyChangingOld("Size", _size, value);
                        _size = value;
                        OnPropertyChanged("Size");
                    }
                }
            }

            [XmlAttribute("seconds")]
            public int Seconds
            {
                get { return _seconds; }
                set
                {
                    if (!object.Equals(_seconds, value))
                    {
                        OnPropertyChangingOld("Seconds", _seconds, value);
                        _seconds = value;
                        OnPropertyChanged("Seconds");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (File)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _type = other._type;
                _size = other._size;
                _seconds = other._seconds;
                _id = other._id;
                _filename = other._filename;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(File source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(File source, bool cloning, bool deepCloning);
            #endregion
            #region CreateKey
            protected override XKey CreateKey()
            {
                XKey key = base.CreateKey();

                key = key.WithKey("Type", _type);

                return key;
            }
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as File;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_type, other._type))
                {
                    return false;
                }

                if (!object.Equals(_size, other._size))
                {
                    return false;
                }

                if (!object.Equals(_seconds, other._seconds))
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                if (!object.Equals(_filename, other._filename))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_type != null)
                {
                    hashCode = hashCode * 37 + _type.GetHashCode();
                }

                if (_filename != null)
                {
                    hashCode = hashCode * 37 + _filename.GetHashCode();
                }

                hashCode = hashCode * 37 + _size.GetHashCode();
                hashCode = hashCode * 37 + _id.GetHashCode();
                hashCode = hashCode * 37 + _seconds.GetHashCode();

                return hashCode;
            }
            #endregion

        }
        #endregion

        #region public class CategoriesInfo
        [XmlRoot]
        public partial class CategoriesInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<Categorie> _categories;
            #endregion

            #region Properties
            [XmlElement("categorie")]
            public XCollection<Categorie> Categories
            {
                get { return _categories; }
                set
                {
                    if (!object.Equals(_categories, value))
                    {
                        OnPropertyChangingOld("categories", _categories, value);
                        _categories = value;
                        OnPropertyChanged("categories");
                    }
                }
            }

            public bool isFreeBook
            {
                get
                {
                    foreach (Categorie obj in _categories)
                        if (obj.Id.Equals("4")) return true;

                    return false;
                }
            }

            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (CategoriesInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);


                if (cloning)
                {
                    _categories = other._categories == null ? null : (XCollection<Categorie>)other._categories.Clone(deepCloning);
                }
                else
                {
                    if (_categories != null)
                    {
                        if (other._categories != null)
                        {
                            _categories.Update(other._categories);
                        }
                        else
                        {
                            _categories = null;
                        }
                    }
                    else
                    {
                        if (other._categories != null)
                        {
                            _categories = (XCollection<Categorie>)other._categories.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(CategoriesInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(CategoriesInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as CategoriesInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_categories, other._categories))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_categories != null)
                {
                    hashCode = hashCode * 37 + _categories.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
        #region public class Categorie
        [XmlRoot]
        public partial class Categorie : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _id;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private string _name;
            #endregion

            #region Properties
            [XmlAttribute("id")]
            public string Id
            {
                get { return _id; }
                set
                {
                    if (!object.Equals(_id, value))
                    {
                        OnPropertyChangingOld("Id", _id, value);
                        _id = value;
                        OnPropertyChanged("Id");
                    }
                }
            }
            [XmlAttribute("category_name")]
            public string Name
            {
                get { return _name; }
                set
                {
                    if (!object.Equals(_name, value))
                    {
                        OnPropertyChangingOld("Name", _name, value);
                        _name = value;
                        OnPropertyChanged("Name");
                    }
                }
            }
            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (Categorie)source;

                BeforeProcessCopy(other, cloning, deepCloning);

                _id = other._id;
                _name = other._name;

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(Categorie source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(Categorie source, bool cloning, bool deepCloning);
            #endregion
            #region CreateKey
            protected override XKey CreateKey()
            {
                XKey key = base.CreateKey();

                key = key.WithKey("Id", _id);

                return key;
            }
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as Categorie;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_id, other._id))
                {
                    return false;
                }

                if (!object.Equals(_name, other._name))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_id != null)
                {
                    hashCode = hashCode * 37 + _id.GetHashCode();
                }

                hashCode = hashCode * 37 + _name.GetHashCode();

                return hashCode;
            }
            #endregion

        }
        #endregion


        #region public class SequencesInfo
        [XmlRoot]
        public partial class SequencesInfo : XObject
        {
            #region Fields
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XCollection<SequenceInfo> _sequences;
            #endregion

            #region Properties
            [XmlElement("sequence")]
            public XCollection<SequenceInfo> Sequences
            {
                get { return _sequences; }
                set
                {
                    if (!object.Equals(_sequences, value))
                    {
                        OnPropertyChangingOld("sequences", _sequences, value);
                        _sequences = value;
                        OnPropertyChanged("sequences");
                    }
                }
            }

            public string SequencesToString
            {
                get
                {
                    return string.Join(",", _sequences);
                }
            }

            #endregion

            #region ProcessCopy
            protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
            {
                base.ProcessCopy(source, cloning, deepCloning);

                var other = (SequencesInfo)source;

                BeforeProcessCopy(other, cloning, deepCloning);


                if (cloning)
                {
                    _sequences = other._sequences == null ? null : (XCollection<SequenceInfo>)other._sequences.Clone(deepCloning);
                }
                else
                {
                    if (_sequences != null)
                    {
                        if (other._sequences != null)
                        {
                            _sequences.Update(other._sequences);
                        }
                        else
                        {
                            _sequences = null;
                        }
                    }
                    else
                    {
                        if (other._sequences != null)
                        {
                            _sequences = (XCollection<SequenceInfo>)other._sequences.Clone(false);
                        }
                    }
                }

                AfterProcessCopy(other, cloning, deepCloning);
            }

            partial void BeforeProcessCopy(SequencesInfo source, bool cloning, bool deepCloning);
            partial void AfterProcessCopy(SequencesInfo source, bool cloning, bool deepCloning);
            #endregion
            #region Equals/GetHashCode
            public override bool Equals(object otherObject)
            {
                var other = otherObject as SequencesInfo;

                if (other == null)
                {
                    return false;
                }

                if (!object.Equals(_sequences, other._sequences))
                {
                    return false;
                }

                return true;
            }

            public override int GetHashCode()
            {
                int hashCode = 17;

                if (_sequences != null)
                {
                    hashCode = hashCode * 37 + _sequences.GetHashCode();
                }

                return hashCode;
            }
            #endregion

        }
        #endregion
    }
    #endregion


    #region public class UniteInformation
    [XmlRoot("catalit-unite-user-ok")]
    public partial class UniteInformation : UserInformation
    {
        #region Fields
        #endregion

        #region Properties
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (UniteInformation)source;

            BeforeProcessCopy(other, cloning, deepCloning);


            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(UniteInformation source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(UniteInformation source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as UniteInformation;

            if (other == null)
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class UserInformation
    public enum AccountTypeEnum
    {
        AccountTypeLibraryAndShop = 0,
        AccountTypeLibrary = 1,
    }

    [XmlRoot("catalit-authorization-ok")]
    public partial class UserInformation : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _sessionId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _userId;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _firstName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _lastName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _middleName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _email;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _web;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _phone;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _city;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _booksCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _authorsCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _usersCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _newPassword;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _oldPassword;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _canRebill;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _account;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AccountTypeEnum _accountType;
        #endregion

        #region Properties
        [XmlAttribute("hide_shop_feautures")]
        public int AccountType
        {
            get { return (int)_accountType; }
            set
            {
                if (!object.Equals(_accountType, value))
                {
                    OnPropertyChangingOld("AccountType", _accountType, value);
                    _accountType = (AccountTypeEnum)(value);
                    OnPropertyChanged("AccountType");
                }
            }
        }

        public bool IsLibraryAccount
        {
            get
            {
                return ((AccountTypeEnum)AccountType == AccountTypeEnum.AccountTypeLibrary);
            }
        }
        [XmlAttribute("sid")]
        public string SessionId
        {
            get { return _sessionId; }
            set
            {
                if (!object.Equals(_sessionId, value))
                {
                    OnPropertyChangingOld("SessionId", _sessionId, value);
                    _sessionId = value;
                    OnPropertyChanged("SessionId");
                }
            }
        }
        [XmlAttribute("user-id")]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (!object.Equals(_userId, value))
                {
                    OnPropertyChangingOld("UserId", _userId, value);
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        [XmlAttribute("first-name")]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (!object.Equals(_firstName, value))
                {
                    OnPropertyChangingOld("FirstName", _firstName, value);
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        [XmlAttribute("last-name")]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (!object.Equals(_lastName, value))
                {
                    OnPropertyChangingOld("LastName", _lastName, value);
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        [XmlAttribute("middle-name")]
        public string MiddleName
        {
            get { return _middleName; }
            set
            {
                if (!object.Equals(_middleName, value))
                {
                    OnPropertyChangingOld("MiddleName", _middleName, value);
                    _middleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        [XmlAttribute("mail")]
        public string Email
        {
            get { return _email; }
            set
            {
                if (!object.Equals(_email, value))
                {
                    OnPropertyChangingOld("Email", _email, value);
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        [XmlAttribute("www")]
        public string Web
        {
            get { return _web; }
            set
            {
                if (!object.Equals(_web, value))
                {
                    OnPropertyChangingOld("Web", _web, value);
                    _web = value;
                    OnPropertyChanged("Web");
                }
            }
        }
        [XmlAttribute("phone")]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (!object.Equals(_phone, value))
                {
                    OnPropertyChangingOld("Phone", _phone, value);
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        [XmlAttribute("city")]
        public string City
        {
            get { return _city; }
            set
            {
                if (!object.Equals(_city, value))
                {
                    OnPropertyChangingOld("City", _city, value);
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        [XmlAttribute("books-cnt")]
        public string BooksCount
        {
            get { return _booksCount; }
            set
            {
                if (!object.Equals(_booksCount, value))
                {
                    OnPropertyChangingOld("BooksCount", _booksCount, value);
                    _booksCount = value;
                    OnPropertyChanged("BooksCount");
                }
            }
        }
        [XmlAttribute("authors-cnt")]
        public string AuthorsCount
        {
            get { return _authorsCount; }
            set
            {
                if (!object.Equals(_authorsCount, value))
                {
                    OnPropertyChangingOld("AuthorsCount", _authorsCount, value);
                    _authorsCount = value;
                    OnPropertyChanged("AuthorsCount");
                }
            }
        }
        [XmlAttribute("users-cnt")]
        public string UsersCount
        {
            get { return _usersCount; }
            set
            {
                if (!object.Equals(_usersCount, value))
                {
                    OnPropertyChangingOld("UsersCount", _usersCount, value);
                    _usersCount = value;
                    OnPropertyChanged("UsersCount");
                }
            }
        }
        [XmlAttribute("new_pwd1")]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (!object.Equals(_newPassword, value))
                {
                    OnPropertyChangingOld("NewPassword", _newPassword, value);
                    _newPassword = value;
                    OnPropertyChanged("NewPassword");
                }
            }
        }
        public string OldPassword
        {
            get { return _oldPassword; }
            set
            {
                if (!object.Equals(_oldPassword, value))
                {
                    OnPropertyChangingOld("OldPassword", _oldPassword, value);
                    _oldPassword = value;
                    OnPropertyChanged("OldPassword");
                }
            }
        }
        [XmlAttribute("can-rebill")]
        public string CanRebill
        {
            get { return _canRebill; }
            set
            {
                if (!object.Equals(_canRebill, value))
                {
                    OnPropertyChangingOld("CanRebill", _canRebill, value);
                    _canRebill = value;
                    OnPropertyChanged("CanRebill");
                }
            }
        }
        [XmlAttribute("account")]
        public double Account
        {
            get { return _account; }
            set
            {
                if (!object.Equals(_account, value))
                {
                    OnPropertyChangingOld("Account", _account, value);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (UserInformation)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _sessionId = other._sessionId;
            _userId = other._userId;
            _firstName = other._firstName;
            _lastName = other._lastName;
            _middleName = other._middleName;
            _email = other._email;
            _web = other._web;
            _phone = other._phone;
            _city = other._city;
            _booksCount = other._booksCount;
            _authorsCount = other._authorsCount;
            _usersCount = other._usersCount;
            _newPassword = other._newPassword;
            _canRebill = other._canRebill;
            _accountType = other._accountType;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(UserInformation source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(UserInformation source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as UserInformation;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_sessionId, other._sessionId))
            {
                return false;
            }

            if (!object.Equals(_userId, other._userId))
            {
                return false;
            }

            if (!object.Equals(_firstName, other._firstName))
            {
                return false;
            }

            if (!object.Equals(_lastName, other._lastName))
            {
                return false;
            }

            if (!object.Equals(_middleName, other._middleName))
            {
                return false;
            }

            if (!object.Equals(_email, other._email))
            {
                return false;
            }

            if (!object.Equals(_web, other._web))
            {
                return false;
            }

            if (!object.Equals(_phone, other._phone))
            {
                return false;
            }

            if (!object.Equals(_city, other._city))
            {
                return false;
            }

            if (!object.Equals(_booksCount, other._booksCount))
            {
                return false;
            }

            if (!object.Equals(_authorsCount, other._authorsCount))
            {
                return false;
            }

            if (!object.Equals(_usersCount, other._usersCount))
            {
                return false;
            }

            if (!object.Equals(_newPassword, other._newPassword))
            {
                return false;
            }

            if (!object.Equals(_canRebill, other._canRebill))
            {
                return false;
            }

            if (!object.Equals(_accountType, other._accountType))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_sessionId != null)
            {
                hashCode = hashCode * 37 + _sessionId.GetHashCode();
            }

            if (_userId != null)
            {
                hashCode = hashCode * 37 + _userId.GetHashCode();
            }

            if (_firstName != null)
            {
                hashCode = hashCode * 37 + _firstName.GetHashCode();
            }

            if (_lastName != null)
            {
                hashCode = hashCode * 37 + _lastName.GetHashCode();
            }

            if (_middleName != null)
            {
                hashCode = hashCode * 37 + _middleName.GetHashCode();
            }

            if (_email != null)
            {
                hashCode = hashCode * 37 + _email.GetHashCode();
            }

            if (_web != null)
            {
                hashCode = hashCode * 37 + _web.GetHashCode();
            }

            if (_phone != null)
            {
                hashCode = hashCode * 37 + _phone.GetHashCode();
            }

            if (_city != null)
            {
                hashCode = hashCode * 37 + _city.GetHashCode();
            }

            if (_booksCount != null)
            {
                hashCode = hashCode * 37 + _booksCount.GetHashCode();
            }

            if (_authorsCount != null)
            {
                hashCode = hashCode * 37 + _authorsCount.GetHashCode();
            }

            if (_usersCount != null)
            {
                hashCode = hashCode * 37 + _usersCount.GetHashCode();
            }

            if (_newPassword != null)
            {
                hashCode = hashCode * 37 + _newPassword.GetHashCode();
            }

            if (_canRebill != null)
            {
                hashCode = hashCode * 37 + _canRebill.GetHashCode();
            }

            if (_accountType != null)
            {
                hashCode = hashCode * 37 + _accountType.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion

    #region public class SmsResponse
    [XmlRoot("catalit-sms-payments-info")]
    public partial class SmsResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Country> _countries;
        #endregion

        #region Properties

        [XmlElement("country")]
        public XCollection<Country> Countries
        {
            get { return _countries; }
            set
            {
                if (!object.Equals(_countries, value))
                {
                    OnPropertyChangingOld("Countries", _countries, value);
                    _countries = value;
                    OnPropertyChanged("Countries");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (SmsResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            if (cloning)
            {
                _countries = other._countries == null ? null : (XCollection<Country>)other._countries.Clone(deepCloning);
            }
            else
            {
                if (_countries != null)
                {
                    if (other._countries != null)
                    {
                        _countries.Update(other._countries);
                    }
                    else
                    {
                        _countries = null;
                    }
                }
                else
                {
                    if (other._countries != null)
                    {
                        _countries = (XCollection<Country>)other._countries.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(SmsResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(SmsResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as SmsResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_countries, other._countries))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_countries != null)
            {
                hashCode = hashCode * 37 + _countries.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Country
    [XmlRoot("country")]
    public partial class Country : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _caption;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _countryCode;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _money;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Operator> _operators;
        #endregion

        #region Properties

        [XmlAttribute("caption")]
        public string Caption
        {
            get { return _caption; }
            set
            {
                if (!object.Equals(_caption, value))
                {
                    OnPropertyChangingOld("Caption", _caption, value);
                    _caption = value;
                    OnPropertyChanged("Caption");
                }
            }
        }
        [XmlAttribute("country_code")]
        public string CountryCode
        {
            get { return _countryCode; }
            set
            {
                if (!object.Equals(_countryCode, value))
                {
                    OnPropertyChangingOld("CountryCode", _countryCode, value);
                    _countryCode = value;
                    OnPropertyChanged("CountryCode");
                }
            }
        }
        [XmlAttribute("money")]
        public string Money
        {
            get { return _money; }
            set
            {
                if (!object.Equals(_money, value))
                {
                    OnPropertyChangingOld("Money", _money, value);
                    _money = value;
                    OnPropertyChanged("Money");
                }
            }
        }
        [XmlElement("operator")]
        public XCollection<Operator> Operators
        {
            get { return _operators; }
            set
            {
                if (!object.Equals(_operators, value))
                {
                    OnPropertyChangingOld("Operators", _operators, value);
                    _operators = value;
                    OnPropertyChanged("Operators");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Country)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            if (cloning)
            {
                _operators = other._operators == null ? null : (XCollection<Operator>)other._operators.Clone(deepCloning);
            }
            else
            {
                if (_operators != null)
                {
                    if (other._operators != null)
                    {
                        _operators.Update(other._operators);
                    }
                    else
                    {
                        _operators = null;
                    }
                }
                else
                {
                    if (other._operators != null)
                    {
                        _operators = (XCollection<Operator>)other._operators.Clone(false);
                    }
                }
            }
            _caption = other._caption;
            _countryCode = other._countryCode;
            _money = other._money;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Country source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Country source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Country;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_caption, other._caption))
            {
                return false;
            }

            if (!object.Equals(_countryCode, other._countryCode))
            {
                return false;
            }

            if (!object.Equals(_money, other._money))
            {
                return false;
            }

            if (!object.Equals(_operators, other._operators))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_caption != null)
            {
                hashCode = hashCode * 37 + _caption.GetHashCode();
            }

            if (_countryCode != null)
            {
                hashCode = hashCode * 37 + _countryCode.GetHashCode();
            }

            if (_money != null)
            {
                hashCode = hashCode * 37 + _money.GetHashCode();
            }

            if (_operators != null)
            {
                hashCode = hashCode * 37 + _operators.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Operator
    [XmlRoot("operator")]
    public partial class Operator : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _caption;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _mnc;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<Number> _numbers;
        #endregion

        #region Properties

        [XmlAttribute("caption")]
        public string Caption
        {
            get { return _caption; }
            set
            {
                if (!object.Equals(_caption, value))
                {
                    OnPropertyChangingOld("Caption", _caption, value);
                    _caption = value;
                    OnPropertyChanged("Caption");
                }
            }
        }
        [XmlAttribute("mnc")]
        public int Mnc
        {
            get { return _mnc; }
            set
            {
                if (!object.Equals(_mnc, value))
                {
                    OnPropertyChangingOld("Mnc", _mnc, value);
                    _mnc = value;
                    OnPropertyChanged("Mnc");
                }
            }
        }
        [XmlElement("num")]
        public XCollection<Number> Numbers
        {
            get { return _numbers; }
            set
            {
                if (!object.Equals(_numbers, value))
                {
                    OnPropertyChangingOld("Numbers", _numbers, value);
                    _numbers = value;
                    OnPropertyChanged("Numbers");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Operator)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            if (cloning)
            {
                _numbers = other._numbers == null ? null : (XCollection<Number>)other._numbers.Clone(deepCloning);
            }
            else
            {
                if (_numbers != null)
                {
                    if (other._numbers != null)
                    {
                        _numbers.Update(other._numbers);
                    }
                    else
                    {
                        _numbers = null;
                    }
                }
                else
                {
                    if (other._numbers != null)
                    {
                        _numbers = (XCollection<Number>)other._numbers.Clone(false);
                    }
                }
            }
            _caption = other._caption;
            _mnc = other._mnc;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Operator source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Operator source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            var other = otherObject as Operator;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_caption, other._caption))
            {
                return false;
            }

            if (!object.Equals(_mnc, other._mnc))
            {
                return false;
            }

            if (!object.Equals(_numbers, other._numbers))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_caption != null)
            {
                hashCode = hashCode * 37 + _caption.GetHashCode();
            }

            hashCode = hashCode * 37 + _mnc.GetHashCode();

            if (_numbers != null)
            {
                hashCode = hashCode * 37 + _numbers.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion
    #region public class Number
    [XmlRoot("num")]
    public partial class Number : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _number;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _subprefix;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _prefix;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _summ;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private double _cost;
        #endregion

        #region Properties
        [XmlAttribute("number")]
        public int PhoneNumber
        {
            get { return _number; }
            set
            {
                if (!object.Equals(_number, value))
                {
                    OnPropertyChangingOld("Number", _number, value);
                    _number = value;
                    OnPropertyChanged("Number");
                }
            }
        }
        [XmlAttribute("subprefix")]
        public string Subprefix
        {
            get { return _subprefix; }
            set
            {
                if (!object.Equals(_subprefix, value))
                {
                    OnPropertyChangingOld("Subprefix", _subprefix, value);
                    _subprefix = value;
                    OnPropertyChanged("Subprefix");
                }
            }
        }
        [XmlAttribute("prefix")]
        public string Prefix
        {
            get { return _prefix; }
            set
            {
                if (!object.Equals(_prefix, value))
                {
                    OnPropertyChangingOld("Prefix", _prefix, value);
                    _prefix = value;
                    OnPropertyChanged("Prefix");
                }
            }
        }
        [XmlAttribute("summ")]
        public double Summ
        {
            get { return _summ; }
            set
            {
                if (!object.Equals(_summ, value))
                {
                    OnPropertyChangingOld("Summ", _summ, value);
                    _summ = value;
                    OnPropertyChanged("Summ");
                }
            }
        }
        [XmlAttribute("cost")]
        public double Cost
        {
            get { return _cost; }
            set
            {
                if (!object.Equals(_cost, value))
                {
                    OnPropertyChangingOld("Cost", _cost, value);
                    _cost = value;
                    OnPropertyChanged("Cost");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (Number)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _number = other._number;
            _subprefix = other._subprefix;
            _prefix = other._prefix;
            _summ = other._summ;
            _cost = other._cost;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(Number source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(Number source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as Number;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_number, other._number))
            {
                return false;
            }

            if (!object.Equals(_subprefix, other._subprefix))
            {
                return false;
            }

            if (!object.Equals(_prefix, other._prefix))
            {
                return false;
            }

            if (!object.Equals(_summ, other._summ))
            {
                return false;
            }

            if (!object.Equals(_cost, other._cost))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_number != null)
            {
                hashCode = hashCode * 37 + _number.GetHashCode();
            }

            if (_subprefix != null)
            {
                hashCode = hashCode * 37 + _subprefix.GetHashCode();
            }

            if (_prefix != null)
            {
                hashCode = hashCode * 37 + _prefix.GetHashCode();
            }

            if (_summ != null)
            {
                hashCode = hashCode * 37 + _summ.GetHashCode();
            }
            if (_cost != null)
            {
                hashCode = hashCode * 37 + _cost.GetHashCode();
            }

            return hashCode;
        }
        #endregion

    }
    #endregion

    #region public class CreditCardInitResponse
    [XmlRoot("catalit-paycard-processing")]
    public partial class CreditCardInitResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _url;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _method;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _homepage;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _termUrl;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XCollection<CreditCardParam> _params;
        #endregion

        #region Properties
        [XmlElement("name")]
        public string Name
        {
            get { return _name; }
            set
            {
                if (!object.Equals(_name, value))
                {
                    OnPropertyChangingOld("Name", _name, value);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        [XmlElement("url")]
        public string Url
        {
            get { return _url; }
            set
            {
                if (!object.Equals(_url, value))
                {
                    OnPropertyChangingOld("Url", _url, value);
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        [XmlElement("TermUrl")]
        public string TermUrl
        {
            get { return _termUrl; }
            set
            {
                if (!object.Equals(_termUrl, value))
                {
                    OnPropertyChangingOld("TermUrl", _termUrl, value);
                    _termUrl = value;
                    OnPropertyChanged("TermUrl");
                }
            }
        }
        [XmlElement("method")]
        public string Method
        {
            get { return _method; }
            set
            {
                if (!object.Equals(_method, value))
                {
                    OnPropertyChangingOld("Method", _method, value);
                    _method = value;
                    OnPropertyChanged("Method");
                }
            }
        }
        [XmlElement("homepage")]
        public string Homepage
        {
            get { return _homepage; }
            set
            {
                if (!object.Equals(_homepage, value))
                {
                    OnPropertyChangingOld("Homepage", _homepage, value);
                    _homepage = value;
                    OnPropertyChanged("Homepage");
                }
            }
        }
        [XmlElement("param")]
        public XCollection<CreditCardParam> Params
        {
            get { return _params; }
            set
            {
                if (!object.Equals(_params, value))
                {
                    OnPropertyChangingOld("Params", _params, value);
                    _params = value;
                    OnPropertyChanged("Params");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (CreditCardInitResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _name = other._name;
            _url = other._url;
            _method = other._method;
            _homepage = other._homepage;
            _termUrl = other._termUrl;
            if (cloning)
            {
                _params = other._params == null ? null : (XCollection<CreditCardParam>)other._params.Clone(deepCloning);
            }
            else
            {
                if (_params != null)
                {
                    if (other._params != null)
                    {
                        _params.Update(other._params);
                    }
                    else
                    {
                        _params = null;
                    }
                }
                else
                {
                    if (other._params != null)
                    {
                        _params = (XCollection<CreditCardParam>)other._params.Clone(false);
                    }
                }
            }

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(CreditCardInitResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(CreditCardInitResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as CreditCardInitResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_name, other._name))
            {
                return false;
            }

            if (!object.Equals(_url, other._url))
            {
                return false;
            }

            if (!object.Equals(_homepage, other._homepage))
            {
                return false;
            }

            if (!object.Equals(_method, other._method))
            {
                return false;
            }

            if (!object.Equals(_termUrl, other._termUrl))
            {
                return false;
            }

            if (!object.Equals(_params, other._params))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_name != null)
            {
                hashCode = hashCode * 37 + _name.GetHashCode();
            }

            if (_url != null)
            {
                hashCode = hashCode * 37 + _url.GetHashCode();
            }

            if (_termUrl != null)
            {
                hashCode = hashCode * 37 + _termUrl.GetHashCode();
            }

            if (_homepage != null)
            {
                hashCode = hashCode * 37 + _homepage.GetHashCode();
            }

            if (_method != null)
            {
                hashCode = hashCode * 37 + _method.GetHashCode();
            }

            if (_params != null)
            {
                hashCode = hashCode * 37 + _params.GetHashCode();
            }

            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Name: {0}, Url: {1}, Homepage: {2}, Method: {3}, TermUrl: {4}, Params: { {5} }", _name, _url, _homepage, _method, _termUrl, _params.ToString());
        }
    }
    #endregion

    #region public class CreditCardParam
    [XmlRoot("param")]
    public partial class CreditCardParam : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _substitute;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _value;
        #endregion

        #region Properties
        [XmlAttribute("name")]
        public string Name
        {
            get { return _name; }
            set
            {
                if (!object.Equals(_name, value))
                {
                    OnPropertyChangingOld("Name", _name, value);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        [XmlAttribute("substitute")]
        public string Substitute
        {
            get { return _substitute; }
            set
            {
                if (!object.Equals(_substitute, value))
                {
                    OnPropertyChangingOld("Subprefix", _substitute, value);
                    _substitute = value;
                    OnPropertyChanged("Subprefix");
                }
            }
        }
        [XmlText]
        public string Value
        {
            get { return _value; }
            set
            {
                if (!object.Equals(_value, value))
                {
                    OnPropertyChangingOld("Value", _value, value);
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (CreditCardParam)source;

            BeforeProcessCopy(other, cloning, deepCloning);

            _name = other._name;
            _substitute = other._substitute;
            _value = other._value;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(CreditCardParam source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(CreditCardParam source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as CreditCardParam;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_name, other._name))
            {
                return false;
            }

            if (!object.Equals(_substitute, other._substitute))
            {
                return false;
            }

            if (!object.Equals(_value, other._value))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_name != null)
            {
                hashCode = hashCode * 37 + _name.GetHashCode();
            }

            if (_substitute != null)
            {
                hashCode = hashCode * 37 + _substitute.GetHashCode();
            }

            if (_value != null)
            {
                hashCode = hashCode * 37 + _value.GetHashCode();
            }

            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Name: {0}, Substitute: {1}, Value: {2}", _name, _substitute, _value);
        }
    }
    #endregion

    #region public class ServerTimeResponse
    [XmlRoot("catalit-fb2-books")]
    public partial class ServerTimeResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _now;
        #endregion

        #region Properties
        [XmlAttribute("now")]
        public string Now
        {
            get { return _now; }
            set
            {
                if (!object.Equals(_now, value))
                {
                    OnPropertyChangingOld("Now", _now, value);
                    _now = value;
                    OnPropertyChanged("Now");
                }
            }
        }
        public long UnixTime
        {
            get
            {
                return ((Time.Ticks - new TimeSpan(4, 0, 0).Ticks) - 621355968000000000) / 10000000;
            }
        }

        public DateTime Time
        {
            get
            {
                return DateTime.ParseExact(_now, "yyyy-MM-dd HH:mm:ss", new CultureInfo("ru-RU"), DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (ServerTimeResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);
            _now = other._now;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(ServerTimeResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(ServerTimeResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as ServerTimeResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_now, other._now))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_now != null)
            {
                hashCode = hashCode * 37 + _now.GetHashCode();
            }
            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Now: {0}", _now);
        }
    }
    #endregion

    [XmlRoot("transaction")]
    #region public class ProcessingResponse
    public partial class ProcessingResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private long _id;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _operation;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _result;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _code;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _status;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _errorCode;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ThreedSecure _secure;
        #endregion

        #region Properties
        [XmlElement("id")]
        public long Id
        {
            get { return _id; }
            set
            {
                if (!object.Equals(_id, value))
                {
                    OnPropertyChangingOld("Id", _id, value);
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        [XmlElement("operation")]
        public string Operation
        {
            get { return _operation; }
            set
            {
                if (!object.Equals(_operation, value))
                {
                    OnPropertyChangingOld("Operation", _operation, value);
                    _operation = value;
                    OnPropertyChanged("Operation");
                }
            }
        }
        [XmlElement("result")]
        public string Result
        {
            get { return _result; }
            set
            {
                if (!object.Equals(_result, value))
                {
                    OnPropertyChangingOld("Result", _result, value);
                    _result = value;
                    OnPropertyChanged("Result");
                }
            }
        }
        [XmlElement("code")]
        public int Code
        {
            get { return _code; }
            set
            {
                if (!object.Equals(_code, value))
                {
                    OnPropertyChangingOld("Code", _code, value);
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        [XmlElement("status")]
        public string Status
        {
            get { return _status; }
            set
            {
                if (!object.Equals(_status, value))
                {
                    OnPropertyChangingOld("Status", _status, value);
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        [XmlElement("errorCode")]
        public int ErrorCode
        {
            get { return _errorCode; }
            set
            {
                if (!object.Equals(_errorCode, value))
                {
                    OnPropertyChangingOld("ErrorCode", _errorCode, value);
                    _errorCode = value;
                    OnPropertyChanged("ErrorCode");
                }
            }
        }
        [XmlElement("threedSecure")]
        public ThreedSecure Secure
        {
            get { return _secure; }
            set
            {
                if (!object.Equals(_secure, value))
                {
                    OnPropertyChangingOld("Secure", _secure, value);
                    _secure = value;
                    OnPropertyChanged("Secure");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (ProcessingResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);
            _id = other._id;
            _code = other._code;
            _errorCode = other._errorCode;
            _secure = other._secure;
            _status = other._status;
            _result = other._result;
            _operation = other._operation;

            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(ProcessingResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(ProcessingResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as ProcessingResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_secure, other._secure))
            {
                return false;
            }

            if (!object.Equals(_code, other._code))
            {
                return false;
            }

            if (!object.Equals(_errorCode, other._errorCode))
            {
                return false;
            }

            if (!object.Equals(_operation, other._operation))
            {
                return false;
            }

            if (!object.Equals(_result, other._result))
            {
                return false;
            }

            if (!object.Equals(_status, other._status))
            {
                return false;
            }

            if (!object.Equals(_id, other._id))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_id != null)
            {
                hashCode = hashCode * 37 + _id.GetHashCode();
            }
            if (_operation != null)
            {
                hashCode = hashCode * 37 + _operation.GetHashCode();
            }
            if (_result != null)
            {
                hashCode = hashCode * 37 + _result.GetHashCode();
            }
            if (_code != null)
            {
                hashCode = hashCode * 37 + _code.GetHashCode();
            }
            if (_status != null)
            {
                hashCode = hashCode * 37 + _status.GetHashCode();
            }
            if (_errorCode != null)
            {
                hashCode = hashCode * 37 + _errorCode.GetHashCode();
            }
            if (_secure != null)
            {
                hashCode = hashCode * 37 + _secure.GetHashCode();
            }
            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Id: {0} Operation: {1} Result: {2} Code: {3} Status: {4} ErrorCode: {5}", _id, _operation, _result, _code, _status, _errorCode);
        }
    }
    #endregion

    [XmlRoot("threedSecure")]
    #region public class ThreedSecure
    public partial class ThreedSecure : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _pareq;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _acsurl;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _pd;
        #endregion

        #region Properties
        [XmlElement("pareq")]
        public string Pareq
        {
            get { return _pareq; }
            set
            {
                if (!object.Equals(_pareq, value))
                {
                    OnPropertyChangingOld("Pareq", _pareq, value);
                    _pareq = value;
                    OnPropertyChanged("Pareq");
                }
            }
        }
        [XmlElement("acsurl")]
        public string Acsurl
        {
            get { return _acsurl; }
            set
            {
                if (!object.Equals(_acsurl, value))
                {
                    OnPropertyChangingOld("Acsurl", _acsurl, value);
                    _acsurl = value;
                    OnPropertyChanged("Acsurl");
                }
            }
        }
        [XmlElement("pd")]
        public string Pd
        {
            get { return _pd; }
            set
            {
                if (!object.Equals(_pd, value))
                {
                    OnPropertyChangingOld("Pd", _pd, value);
                    _pd = value;
                    OnPropertyChanged("Pd");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (ThreedSecure)source;

            BeforeProcessCopy(other, cloning, deepCloning);
            _acsurl = other._acsurl;
            _pareq = other._pareq;
            _pd = other._pd;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(ThreedSecure source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(ThreedSecure source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as ThreedSecure;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_acsurl, other._acsurl))
            {
                return false;
            }

            if (!object.Equals(_pareq, other._pareq))
            {
                return false;
            }

            if (!object.Equals(_pd, other._pd))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_acsurl != null)
            {
                hashCode = hashCode * 37 + _acsurl.GetHashCode();
            }
            if (_pareq != null)
            {
                hashCode = hashCode * 37 + _pareq.GetHashCode();
            }
            if (_pd != null)
            {
                hashCode = hashCode * 37 + _pd.GetHashCode();
            }
            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Acsurl: {0} Pareq: {1} Pd: {2}", _acsurl, _pareq, _pd);
        }
    }
    #endregion

    #region public class SelfServiceBookResponse
    public enum SelfServiceResponseEnum
    {
        Ok,
        Error,
        QueueOk,
        QueueError,
        DropOk,
        DropError
    }
    public partial class SelfServiceResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SelfServiceResponseEnum _state;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _queueCount;
        #endregion
        public SelfServiceResponse(RawFile text)
        {
            var xmlString = System.Text.Encoding.UTF8.GetString(text.Raw, 0, text.Raw.Length);

            using (var reader = XmlReader.Create(new StringReader(xmlString)))
            {
                while (reader.Read())
                {
                    switch (reader.NodeType)
                    {
                        case XmlNodeType.Element:
                            if (reader.Name.Equals("book_request_ok"))
                            {
                                _state = SelfServiceResponseEnum.Ok;
                            }
                            else if (reader.Name.Equals("book_request_failed"))
                            {
                                _state = SelfServiceResponseEnum.Error;
                            }
                            else if (reader.Name.Equals("book_request_queue_joined"))
                            {
                                if (!string.IsNullOrEmpty(reader.GetAttribute("cnt")))
                                {
                                    _state = SelfServiceResponseEnum.QueueOk;
                                    _queueCount = reader.GetAttribute("cnt");
                                }
                                else if (!string.IsNullOrEmpty(reader.GetAttribute("error")))
                                {
                                    _state = SelfServiceResponseEnum.QueueError;
                                }
                            }
                            else if (reader.Name.Equals("book_request_drop_ok"))
                            {
                                _state = SelfServiceResponseEnum.DropOk;
                            }
                            else if (reader.Name.Equals("book_request_drop_error"))
                            {
                                _state = SelfServiceResponseEnum.DropError;
                            }
                            break;
                        case XmlNodeType.Text:

                            break;
                        case XmlNodeType.XmlDeclaration:
                        case XmlNodeType.ProcessingInstruction:
                            break;
                        case XmlNodeType.Comment:
                            break;
                        case XmlNodeType.EndElement:
                            break;
                    }
                }
            }
        }
        #region Properties
        public SelfServiceResponseEnum State
        {
            get { return _state; }
        }
        public string QueueCount
        {
            get { return _queueCount; }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (SelfServiceResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);
            _state = other._state;
            _queueCount = other._queueCount;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(SelfServiceResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(SelfServiceResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as SelfServiceResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_state, other._state))
            {
                return false;
            }

            if (!object.Equals(_queueCount, other._queueCount))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_state != null)
            {
                hashCode = hashCode * 37 + _state.GetHashCode();
            }

            if (_queueCount != null)
            {
                hashCode = hashCode * 37 + _queueCount.GetHashCode();
            }

            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("State: {0}", _state);
        }
    }
    #endregion

    #region public class ServerTimeResponse
    [XmlRoot("catalit-purge-rebills")]
    public partial class PurgeRebillsResponse : XObject
    {
        #region Fields
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string _result;
        #endregion

        #region Properties
        [XmlAttribute("result")]
        public string Result
        {
            get { return _result; }
            set
            {
                if (!object.Equals(_result, value))
                {
                    OnPropertyChangingOld("Result", _result, value);
                    _result = value;
                    OnPropertyChanged("Result");
                }
            }
        }
        #endregion

        #region ProcessCopy
        protected override void ProcessCopy(XObject source, bool cloning, bool deepCloning)
        {
            base.ProcessCopy(source, cloning, deepCloning);

            var other = (PurgeRebillsResponse)source;

            BeforeProcessCopy(other, cloning, deepCloning);
            _result = other._result;
            AfterProcessCopy(other, cloning, deepCloning);
        }

        partial void BeforeProcessCopy(PurgeRebillsResponse source, bool cloning, bool deepCloning);
        partial void AfterProcessCopy(PurgeRebillsResponse source, bool cloning, bool deepCloning);
        #endregion
        #region Equals/GetHashCode
        public override bool Equals(object otherObject)
        {
            if (!base.Equals(otherObject))
            {
                return false;
            }

            var other = otherObject as PurgeRebillsResponse;

            if (other == null)
            {
                return false;
            }

            if (!object.Equals(_result, other._result))
            {
                return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            int hashCode = 17;

            if (_result != null)
            {
                hashCode = hashCode * 37 + _result.GetHashCode();
            }
            return hashCode;
        }
        #endregion

        public override string ToString()
        {
            return string.Format("Result: {0}", _result);
        }
    }
    #endregion   
}
